#!/usr/bin/env python
# encoding: utf-8
from __future__ import division, print_function
import os

thresholds = [
    ( 10, ( 76, 10)),
    (  5, (226, 11)),
    (  0, (196,  9)),
    ( -1, (255,  7)),
]

def homely(path):
    path = path.rstrip("/")
    home = os.environ.get("HOME", "").rstrip("/")
    media = "/run/media/%s" % os.environ.get("LOGNAME", "root")
    if path == home:
        return "~"
    elif (path + "/").startswith(home + "/"):
        return "~" + path[len(home):]
    elif (path + "/").startswith(media + "/"):
        return "…" + path[len(media):]
    else:
        return path or "/"

def human(n, d=1, u=1024):
    cs = "BkMGTEP"
    e = 0
    while n >= u:
        n /= u
        e += 1
    c = cs[e]
    return "%.*f%s" % (d, n, c)

def percent(n, digits):
    if round(n, digits) < 100:
        return "%*.*f%%" % (digits+2, digits, n)
    else:
        return "%*.*f%%" % (digits+1, digits-1, n)

def ansify(text, fmt):
    return "\033[%sm%s\033[m" % (fmt, text) if fmt else text

def gauge(width, level, full="▓", empty="░", color="", full_color="", empty_color=""):
    cells = int(width * level / 100)

    return ansify(full * cells, full_color or color) \
         + ansify(empty * (width - cells), empty_color or color)

def gauge2(width, level, color="37"):
    return gauge(width, level,
                 full="|", full_color="1;%s" % color,
                 empty="|", empty_color="2;%s" % color)

def gauge3(width, level,
           full_char="█", partial_char="▌", empty_char=" ",
           full_fmt="", partial_fmt="", empty_fmt=""):

    cells = width * level / 100
    n_full = int(cells)
    n_partial = int(round(cells % 1))
    n_empty = int(width - n_full - n_partial)

    return ansify(full_char    * n_full,    full_fmt) \
         + ansify(partial_char * n_partial, partial_fmt) \
         + ansify(empty_char   * n_empty,   empty_fmt)

def rgb_split(color):
    r = (color - 16) // 6 // 6 % 6
    g = (color - 16) // 6 % 6
    b = (color - 16) % 6
    return (r, g, b)

def rgb_merge(r, g, b):
    return (r * 6 * 6) + (g * 6) + b + 16

def darken(color, n):
    if 0 <= color <= 7:
        return color
    elif 8 <= color <= 15:
        return color - 8 if n > 0 else color
    elif 16 <= color <= 232:
        r, g, b = rgb_split(color)
        r = max(r - n, 0)
        g = max(g - n, 0)
        b = max(b - n, 0)
        return rgb_merge(r, g, b)
    elif 232 <= color <= 255:
        return max(color - 3*n, 232)

def gauge3x(width, level, color, bars=None):
    bright = color
    dark = darken(color, 1)

    if not bars:
        if os.getenv("TERM") == "linux":
            bars = "#=-"
        else:
            bars = u"\u275a", u"\u275a", u"\u2758"
    elif len(bars) != 3:
        bars = bars[0] * 3

    return gauge3(width, level, *bars,
                    full_fmt="38;5;%d" % bright,
                    partial_fmt="2;38;5;%d" % dark,
                    empty_fmt="2;38;5;%d" % dark)

def threshold(level):
    for tmin, tval in thresholds:
        if level >= tmin:
            return tval
    return tval

def enum_mtab():
    unfstypes = {
        "cgroup", "devpts", "ecryptfs", "efivarfs", "rootfs",
    }
    unmtpt = {
        "/boot", "/boot/efi",
        "/dev", "/dev/shm",
        "/run", "/run/lock", "/run/shm",
        "/sys/fs/cgroup",
    }
    with open("/etc/mtab") as fh:
        for line in fh:
            dev, mtpt, fstype, rest = line.strip().split(None, 3)
            if (fstype in unfstypes) or (mtpt in unmtpt):
                continue
            elif mtpt.startswith("/run/user/") \
            and not mtpt.startswith("/run/user/%d/" % os.getuid()):
                continue
            else:
                yield mtpt

parts = list(enum_mtab())
parts.sort()

quota_gauge_width = 30
disk_gauge_width = 10

fmt = " %-16s %7s %7s %7s %-*s %5s %-*s %3s"

print(ansify(fmt, "1") % (
    "PATH",
    "TOTAL",
    "FREE",
    "AVAIL",
    quota_gauge_width, "QUOTA USAGE",
    "",
    disk_gauge_width, "DISK USAGE",
    "",
))

for mtpt in parts:
    try:
        st = os.statvfs(mtpt)
    except PermissionError:
        continue
    except OSError:
        continue

    if st.f_blocks == 0:
        continue

    total_bytes     = st.f_bsize * st.f_blocks
    free_bytes      = st.f_bsize * st.f_bfree
    avail_bytes     = st.f_bsize * st.f_bavail

    used_bytes      = total_bytes - free_bytes
    quota_bytes     = used_bytes + avail_bytes

    quota_part      = used_bytes / quota_bytes * 100
    disk_part       = used_bytes / total_bytes * 100

    quota_color     = threshold(100 - quota_part)[0]
    disk_color      = threshold(-1)[0]

    print(fmt % (
        homely(mtpt),

        human(total_bytes),
        human(free_bytes),
        human(avail_bytes),

        quota_gauge_width,
        gauge3x(quota_gauge_width, quota_part, quota_color),
        percent(quota_part, 1),

        disk_gauge_width,
        gauge3x(disk_gauge_width, disk_part, darken(disk_color, 2)),
        percent(disk_part, 0),
    ))
