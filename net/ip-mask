#!/usr/bin/env python
import sys
from ipaddress import *
from nullroute import Core

def nprint(k, *v):
    if isinstance(v[0], IPv6Address) and str(v[0]) != str(v[0].exploded):
        v = (v[0].exploded, "(%s)" % v[0])
    print("\033[33m%10s\033[m" % k, *v)

def addr2props(addr):
    mapping = [
        ("is_loopback", "loopback"),
        ("is_link_local", "link-local"),
        ("is_site_local", "site-local"),
        ("is_global", "global"),
        ("is_private", "private"),
        ("is_multicast", "multicast"),
        ("is_reserved", "reserved"),
    ]
    props = []
    for prop, name in mapping:
        if getattr(addr, prop, False):
            props.append(name)
    return props

try:
    arg = sys.argv[1]
    if arg.startswith("/"):
        plen = int(arg[1:])

        if plen < 0:
            Core.die("prefix length must be positive")
        elif plen > 128:
            Core.die("prefix length too large for any family")

        if plen <= 32:
            print("--- IPv4 ---")
            net = ip_network("0.0.0.0/%d" % plen)
            nprint("prefix", "/%d" % net.prefixlen)
            nprint("netmask", net.netmask)
            nprint("size", net.num_addresses)
        if plen <= 128:
            print("--- IPv6 ---")
            net = ip_network("::/%d" % plen)
            nprint("prefix", "/%d" % net.prefixlen)
            nprint("netmask", net.netmask.exploded)
            nprint("first", net.network_address.exploded)
            nprint("last", net.broadcast_address.exploded)
    elif "/" in arg:
        addr = ip_interface(arg)
        nprint("address", addr)
        props = addr2props(addr)
        if props:
            nprint("", "(%s)" % ", ".join(props))
        net = addr.network
        nprint("network", net)
        nprint("netmask", net.netmask)
        if addr.version == 4:
            nprint("size", net.num_addresses)
        nprint("first", net.network_address)
        nprint("last", net.broadcast_address)
    else:
        addr = ip_address(arg)
        if addr.version == 4 and addr._is_valid_netmask(arg):
            net = ip_network("0.0.0.0/%s" % arg)
            nprint("netmask", net.netmask)
            nprint("prefix", "/%d" % net.prefixlen)
            nprint("size", net.num_addresses)
            nprint("first", net.network_address)
            nprint("last", net.broadcast_address)
        else:
            nprint("address", addr)
            props = addr2props(addr)
            if props:
                nprint("", "(%s)" % ", ".join(props))
except IndexError:
    Core.die("not enough arguments")
except ValueError as e:
    Core.die(e)
