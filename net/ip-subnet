#!/usr/bin/env python3
# ip-subnet - print subnets of a network for given prefix length
import sys
import getopt
from ipaddress import *
from nullroute.core import *

def usage():
    print("Usage: %s [-s] <ip_network> /<prefix>" % Core.arg0)
    print("       %s [-s] <ip_network> +<increment>" % Core.arg0)

try:
    short = False
    opts, args = getopt.getopt(sys.argv[1:], "s", ["short"])
    for opt, optarg in opts:
        if opt in {"-s", "--short"}:
            short = True

    net = ip_network(args[0])
    if args[1].startswith("/"):
        submask = int(args[1][1:])
        increment = submask - net.prefixlen
    elif args[1].startswith("+"):
        increment = int(args[1])
    elif args[1].startswith("-"):
        increment = int(args[1])
    else:
        Core.die("submask should be /x or +x")

    if increment < 0:
        increment *= -1
        net = net.supernet(increment)
        total = 2**(increment)

    if not short:
        print(net)

    subnets = net.subnets(increment)
    count = 0
    total = 2**increment

    if short:
        net = next(subnets)
    else:
        for net in subnets:
            print(" ", net)
            count += 1
            if count >= 2**20:
                Core.err("stopping after %d subnets out of %d" % (count, total))
                break

    if net.version == 6 and net.prefixlen < 64:
        msg = "%d ranges × %d subnets" % (total, 2**(64-net.prefixlen))
    elif net.version == 6 and net.prefixlen == 64:
        msg = "%d subnets" % total
    elif net.prefixlen == net.max_prefixlen:
        msg = "%d addresses" % total
    elif increment == 0:
        msg = "1 network × %d addresses" % (net.num_addresses,)
    else:
        msg = "%d subnets × %d addresses" % (total, net.num_addresses)

    if short:
        print(msg)
    elif sys.stdout.isatty():
        print("\033[38;5;244m=> %s\033[m" % msg)

    Core.exit()
except IndexError:
    usage()
    Core.die("not enough arguments")
except (ValueError, getopt.GetoptError) as e:
    Core.die(str(e))
