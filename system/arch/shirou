#!/usr/bin/env python3
from collections import defaultdict
from nullroute.core import Core, Env
import os
from pprint import pprint
import re
import requests
import sys
import subprocess

def vercmp(a, b):
    res = subprocess.run(["vercmp", a, b],
                         stdout=subprocess.PIPE)
    return int(res.stdout.strip())

class AurApi():
    def __init__(self):
        self.ua = requests.Session()

    def _get(self, url, *args, **kwargs):
        Core.debug("fetching %r" % url, skip=1)
        resp = self.ua.get(url, *args, **kwargs)
        resp.raise_for_status()
        return resp

    def get_info(self, pkg_names):
        resp = self._get("https://aur.archlinux.org/rpc/",
                         params={"v": 5, "type": "info", "arg[]": pkg_names})
        return resp.json()

class AurHelper():
    def __init__(self):
        self.aur = AurApi()
        self.cache_dir = os.path.join(Env.xdg_cache_home(), "pacaur")

    def get_local_foreign_pkgs(self):
        with subprocess.Popen(["pacman", "-Qm"],
                              stdout=subprocess.PIPE) as proc:
            return {pkg: ver
                    for (pkg, ver)
                    in [line.decode().strip().split()
                        for line in proc.stdout]}

    def _aurball_path(self, pkg_name):
        return os.path.join(self.cache_dir, pkg_name.replace("/", "_"))

    def update_aurball(self, pkg_name):
        Core.info("updating source package for %r", pkg_name)
        git_path = self._aurball_path(pkg_name)
        subprocess.run(["git", "pull", "--ff-only"],
                       cwd=git_path)

    def build_aurball(self, pkg_name):
        Core.info("building source package %r", pkg_name)
        git_path = self._aurball_path(pkg_name)
        subprocess.run(["makepkg", "-r", "-s", "--noconfirm"],
                       cwd=git_path)

    def _pkg_path_to_name(self, path):
        m = re.match(r"^(.+)-[^-]+-[^-]+-[^-]+\.pkg\.tar\.\w+$", os.path.basename(path))
        return m.group(1)

    def _aurball_pkglist(self, pkg_base):
        git_path = self._aurball_path(pkg_base)
        r = subprocess.run(["makepkg", "--packagelist"],
                           cwd=git_path,
                           stdout=subprocess.PIPE)
        paths = r.stdout.decode().splitlines()
        return {self._pkg_path_to_name(path): path
                for path in paths}

    def install_aurball(self, pkg_base, pkg_names):
        Core.info("building source package %r", pkg_base)
        pkg_paths = self._aurball_pkglist(pkg_base)
        pkg_paths = [v for (k, v) in pkg_paths.items()
                       if k in pkg_names]
        subprocess.run(["sudo", "pacman", "-U", *pkg_paths])

    def do_sysupdate(self):
        local = self.get_local_foreign_pkgs()
        local_names = {*local.keys()}
        remote = self.aur.get_info(local_names)
        remote = {pkg["Name"]: pkg
                  for pkg in remote["results"]}

        updates_packages = set()
        updates_pkgbases = defaultdict(set)
        for pkg in local:
            if pkg not in remote:
                Core.notice("local foreign package %r not in AUR", pkg)
                continue
            local_ver = local[pkg]
            remote_ver = remote[pkg]["Version"]
            remote_base = remote[pkg]["PackageBase"]
            ver_delta = vercmp(local_ver, remote_ver)
            if ver_delta < 0:
                Core.info("local package %r is older than AUR (%r < %r)", pkg, local_ver, remote_ver)
                updates_packages.add(pkg)
                updates_pkgbases[remote_base].add(pkg)
            elif ver_delta > 0:
                Core.notice("local package %r is newer than AUR (%r > %r)", pkg, local_ver, remote_ver)
            else:
                Core.debug("local package %r matches AUR (%r)", pkg, local_ver)
        Core.debug("pending updates: %r", updates_packages)
        Core.debug("pending updates: %r", updates_pkgbases)

        for pkg_base, pkg_names in updates_pkgbases.items():
            self.update_aurball(pkg_base)
            self.build_aurball(pkg_base)
            self.install_aurball(pkg_base, pkg_names)

helper = AurHelper()
helper.do_sysupdate()
