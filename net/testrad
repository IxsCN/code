#!/usr/bin/env bash
# testrad -- automates RADIUS testing between domains

. lib.bash || exit

cd ~

(( !errors )) || exit

declare -- self via save_chain
declare -A name user pass host port secret eap _alias_
declare -- _host _port _secret _eap _phase2 _outer _user _pass
declare -- _tlscert _tlskey _tlsca

eapol_bin="eapol_test"

# parse arguments

while (( $# )); do
	if [[ ! $self ]]; then
		self=$1
		via=$self
	else
		debug "args: '$1', '$2'"
		case ${1#--} in
		# RADIUS server
		'via')		via=$2; shift;;
		'host')		_host=$2; shift;;
		'port')		_port=$2; shift;;
		'secret')	_secret=$2; shift;;
		'-o')		save_chain=$2; shift;;
		'-v')		eapol_bin=$2; shift;;
		# basic or inner mechanism
		'phase2')	_mech=$2; shift;;
		'mech')		_mech=$2; shift;;
		'using')	_mech=$2; shift;;
		# outer EAP mechanism
		'phase1')	_eap=$2; shift;;
		'eap')		_eap=$2; shift;;
		'inside')	_eap=$2; shift;;
		# main (inner) identity
		'user')		_user=$2; : ${_pass:="-"}; shift;;
		'login')	_user=$2; : ${_pass:="-"}; shift;;
		'inner-user')	_user=$2; : ${_pass:="-"}; shift;;
		'inner-login')	_user=$2; : ${_pass:="-"}; shift;;
		'pass')		_pass=$2; shift;;
		'cert')		_tlscert=$2; shift;;
		'key')		_tlskey=$2; shift;;
		'ca'|'ca-cert')	_tlsca=$2; shift;;
		# anonymous (outer) identity
		'outer')	_outer=$2; shift;;
		'outer-user')	_outer=$2; shift;;
		'outer-login')	_outer=$2; shift;;
		# etc.
		*)		err "bad arg: \"$1\"";;
		esac
	fi
	shift
done

[[ $self ]]	|| die "missing argument (our realm)"

# check for necessary tools

have 'radtest'			|| err "missing 'radtest'"
have "$eapol_bin"		|| die "missing '$eapol_bin'"

# parse config

lib::find_file config_file= ~/lib/testrad.conf.sh config:testrad.conf.sh

debug "loading hosts from '$config_file'"

. "$config_file" || die "could not load configuration"

while val=${_alias_[$self]}; [[ $val ]]; do
	debug "conf alias (\$self) \"$self\" -> \"$val\""
	self=$val
done

while val=${_alias_[$via]}; [[ $val ]]; do
	debug "conf alias (\$via) \"$via\" -> \"$val\""
	via=$val
done

debug "self \"$self\", via \"$via\""

# load parameters

[[ $_user ]]	|| _user=${user[$self]}
[[ $_pass ]]	|| _pass=${pass[$self]}
[[ $_eap ]]	|| _eap=${eap[$self]}
[[ $_host ]]	|| _host=${host[$via]}
[[ $_port ]]	|| _port=${port[$via]:-1812}
[[ $_secret ]]	|| _secret=${secret[$via]}
[[ $_outer ]]	|| _outer=${_user}

_eap=${_eap^^}

if [[ $_eap == PEAP ]]; then
	_mech=${_mech:-eap-mschapv2}
else
	_mech=${_mech:-mschapv2}
fi

[[ $_user ]]	|| err "missing username for '$self'"
if [[ $_pass == "-" ]]; then
	read -s -p "password for '$_user': " _pass; echo
fi
[[ $_pass ]]	|| err "missing password for '$self'"
[[ $_host ]]	|| err "missing RADIUS server for '$via'"
[[ $_secret ]]	|| err "missing RADIUS secret for '$via'"

case $_mech in
	'pap')		_phase2='PAP';;
	'chap')		_phase2='CHAP';;
	'mschap')	_phase2='MSCHAPV2';;
	'mschapv2')	_phase2='MSCHAPV2'; _mech='mschap';;
	'eap-mschap')	_phase2='EAP-MSCHAPV2';;
	'eap-mschapv2')	_phase2='EAP-MSCHAPV2';;
	*)		err "unknown mechanism '$_mech'"
esac

if [[ $_eap == PEAP && $_phase2 != EAP-* ]]; then
	err "EAP-$_eap can only transport other EAP mechanisms"
fi

if [[ $_eap == TLS ]]; then
	if [[ ! $_tlscert ]]; then
		err "missing certificate for EAP-$_eap ('cert' option)"
	elif [[ ! -f $_tlscert ]]; then
		err "certificate '$_tlscert' does not exist"
	fi

	if [[ ! $_tlskey ]]; then
		err "missing private key for EAP-$_eap ('key' option)"
	elif [[ ! -f $_tlskey ]]; then
		err "key file '$_tlskey' does not exist"
	fi
fi

(( ! errors )) || exit

log "account: \"$_user\""
debug "password: \"$_pass\""
log "home server: ${name[$self]} (${host[$self]:-none})"
if [[ "$self" != "$via" ]]; then
	log "proxy via: ${name[$via]} ($_host)"
fi

if [[ $_eap && $_eap != NONE ]]; then
	log "mechanism: phase2=$_phase2 inside EAP-$_eap"
	if [[ "$_outer" != "$_user" ]]; then
		log "anonymous identity: \"$_outer\""
	fi

	wd=$(mktemp -d /tmp/testrad.XXXXXXXX)
	conf="$wd/eapol_test.conf"
	{
		echo "network={"
		echo "  ssid=\"eduroam\""
		echo "  key_mgmt=WPA-EAP"
		echo "  eap=$_eap"
		if [[ $_eap == @(PEAP|TTLS) ]]; then
			echo "  pairwise=CCMP TKIP"
			echo "  group=CCMP TKIP WEP104 WEP40"
			echo "  phase2=\"auth=$_phase2\""
		fi
		echo "  identity=\"$_user\""
		if [[ $_outer ]]; then
			echo "  anonymous_identity=\"$_outer\""
		fi
		if [[ $_tlsca ]]; then
			echo "  ca_cert=\"$_tlsca\""
		fi
		if [[ $_tlscert ]]; then
			echo "  client_cert=\"$_tlscert\""
		fi
		if [[ $_tlskey ]]; then
			echo "  private_key_password=\"$_tlskey\""
		fi
		echo "  password=\"$_pass\""
		echo "}"
	} > "$conf"
	cmd=($eapol_bin -c "$conf" -a "$_host" -p "$_port" -s "$_secret" -t 5
			-M "22:44:66:42:42:42" -C "testrad+eapol_test")
	if [[ $save_chain ]]; then
		cmd+=(-o "$save_chain")
	fi
else
	log "mechanism: direct $_phase2"
	if [[ "$_outer" != "$_user" ]]; then
		die "anonymous identity \"$_outer\" not supported without EAP"
	fi
	cmd=(radtest -t "$_mech" "$_user" "$_pass" "$_host:$_port" 0 "$_secret")
fi

echo "+ ${cmd[*]}"
if "${cmd[@]}"; then
	r=0
	log "test successful"
else
	r=$?
	err "test failed ($cmd returned $r)"
fi

if [[ -s $save_chain ]]; then
	log "server certificate chain saved to '$save_chain'"
elif [[ $save_chain ]]; then
	err "did not obtain server certificate chain"
fi

if [[ $wd == /tmp/testrad.* ]]; then
	rm -rf "$wd"
fi

exit $r
