#!/usr/bin/env php
<?php
# rdt v1.4+ε - recursive DNS lookup tool
#
# (c) 2009–2016 Mantas Mikulėnas <grawity@gmail.com>
# Released under the MIT License (dist/LICENSE.mit)

error_reporting(-1); // use strict;

function msg_help() {
	$usage = <<<EOTFM
Usage: rdt [-cC] ADDRESS [ADDRESS ...]

Displays forward and/or reverse DNS of a given address, recursively.

Options:
  -c, -C                        Enable/disable coloured output.

Note: On Windows, PHP 5.3.1 or later is required to resolve IPv6 addresses.

EOTFM;
	fwrite(STDERR, $usage);
	return 2;
}

function is_inetaddr($a) {
	return @inet_pton($a) !== false;
}
function is_inet4addr($a) {
	return ($p = @inet_pton($a)) !== false and strlen($p) == 4;
}
function is_inet6addr($a) {
	return ($p = @inet_pton($a)) !== false and strlen($p) == 16;
}

# convert IP address to .arpa domain for PTR
function to_ptr($ip) {
	$packed = @inet_pton($ip);
	if ($packed === false) {
		return false;
	} elseif (strlen($packed) == 4) {
		$ip = unpack("C*", $packed);
		$suffix = ".in-addr.arpa.";
	} elseif (strlen($packed) == 16) {
		$ip = unpack("H*", $packed);
		$ip = str_split($ip[1]);
		$suffix = ".ip6.arpa.";
	} else {
		return false;
	}
	return implode(".", array_reverse($ip)) . $suffix;
}

# Do DNS requests
function resolve($addr) {
	if (is_inetaddr($addr)) {
		$addr = to_ptr($addr);
		$rr = @dns_get_record($addr, DNS_PTR);
	} else {
		$rr = @dns_get_record($addr, DNS_CNAME);
		if (empty($rr)) {
			$rr4 = @dns_get_record($addr, DNS_A);
			$rr6 = @dns_get_record($addr, DNS_AAAA);
			$rr = array_merge($rr4 ? $rr4 : array(),
			                  $rr6 ? $rr6 : array());
		}
	}

	$addresses = array();
	if (empty($rr))
		return $addresses;
	foreach ($rr as $record) {
		switch ($record["type"]) {
		case "A":
			$addresses[] = $record["ip"];
			break;
		case "AAAA":
			$addresses[] = $record["ipv6"];
			break;
		case "CNAME":
		case "PTR":
			$addresses[] = $record["target"];
			break;
		}
	}
	return $addresses;
}

# Colourize the provided string.
function colour($addr) {
	 if (!$GLOBALS["use_colour"])
		return $addr;

	if ($addr === "(none)")
		$c = "38;5;9";
	elseif (is_inet4addr($addr))
		$c = "38;5;13";
	elseif (is_inet6addr($addr))
		$c = "38;5;14";
	else
		$c = "38;5;214";

	return "\033[{$c}m{$addr}\033[m";
}

# This is where the fun happens.
function go($from, $depth = 0, $skip = array(), &$visited = array()) {
	$visited[] = $from;

	# print current address
	print str_repeat(" ", $depth*3) . colour($from) . " = ";

	$addresses = resolve($from); sort($addresses);

	if (empty($addresses))
		print colour("(none)");
	else
		print implode(", ", $addresses);
	print "\n";

	# recursively look up the results
	foreach ($addresses as $addr) {
		$addr = strtolower($addr);
		if (in_array($addr, $visited) or in_array($addr, $skip))
			continue;
		$visited[] = $addr;
		go($addr, $depth+1, $skip+$addresses, $visited);
	}
}

# on Windows, %TERM% will most likely be unset
# on Unix, posix.so might be disabled, if it is -- check $TERM
if (function_exists("posix_isatty")) {
	$use_colour = posix_isatty(STDOUT);
} else {
	$TERM = getenv("TERM");
	$use_colour = !($TERM === false or $TERM === "dumb");
}

$addresses = array();

# getopt() doesn't let me grab the rest of $argv
$err = 0;
for ($i = 1; $i < $argc; $i++) {
	$arg = $argv[$i];
	if (!strlen($arg)) continue;
	elseif ($arg[0] == "-") switch ($arg) {
		case "-c":
			$use_colour = true; break;
		case "-C":
			$use_colour = false; break;
		case "-h":
		case "--help":
			exit(msg_help());
		default:
			fwrite(STDERR, "rdt: unknown option '$arg'\n");
			++$err;
	}
	else $addresses[] = $arg;
}

if ($err > 0 || count($addresses) == 0)
	exit(msg_help());

foreach ($addresses as $i => $start_addr) {
	if ($i > 0) print "\n";
	go($start_addr);
}
