#!/usr/bin/env python3
from nullroute.core import Core
import nullroute.sec
from nullroute.sec.util import OAuthTokenCache
from oauthlib.oauth2.rfc6749.errors import (InvalidClientError, InvalidGrantError)
from pprint import pprint
import requests
from requests_oauthlib import OAuth2Session
import time

class SwedbankClient(object):
    BASE = "https://psd2.api.swedbank.com"
    AUTHZ_URI = BASE + "/psd2/authorize"
    TOKEN_URI = BASE + "/psd2/token"

    REDIRECT_URI = "https://nullroute.eu.org/dev/consume"

    def __init__(self, client_id, client_secret):
        sandbox = True

        self.bic = "SANDLT22" if sandbox else "HABALT22"

        self.client_secret = client_secret
        self.token_cache = OAuthTokenCache("swedbank.com",
                                           display_name="Swedbank")
        self.rua = requests.Session()
        self.cua = OAuth2Session(client_id,
                                 scope="PSD2sandbox" if sandbox else "PSD2",
                                 redirect_uri=self.REDIRECT_URI,
                                 token_updater=lambda token: \
                                    self.token_cache.store_token(token))

        token = self.token_cache.load_token()
        if token:
            self.cua.token = token

    def login(self):
        try:
            token = self.cua.refresh_token(self.TOKEN_URI,
                                           client_id=self.cua.client_id,
                                           client_secret=self.client_secret)
        except (InvalidClientError, InvalidGrantError) as e:
            Core.warn("failed to refresh token: %s", e)
            self.token_cache.forget_token()

            (uri, state_id) = self.cua.authorization_url(self.AUTHZ_URI,
                                                         bic=self.bic)
            print("Login page:", uri)

            Code.debug("polling for grant code")
            code = None
            while not code:
                time.sleep(1)
                resp = self.rua.get("https://nullroute.eu.org/dev/retrieve",
                                    params={"state": state_id,
                                            "forget": 1})
                resp.raise_for_status()
                code = resp.json()
            Core.debug("got grant code %r", code)

            self.cua.fetch_token(self.TOKEN_URI,
                                 code=code,
                                 client_secret=self.client_secret)
        self.token_cache.store_token(self.cua.token)

    def get_accounts(self):
        resp = self.cua.get(self.BASE + "/sandbox/v1/accounts",
                            params={"bic": self.bic,
                                    "with-balance": "true"},
                            headers={"process-id": "foo",
                                     "request-id": "bar"})
        pprint(resp.json())

creds = nullroute.sec.get_netrc("OAuth/api.swedbank.com")

api = SwedbankClient(client_id=creds["login"],
                     client_secret=creds["password"])
api.login()
api.get_accounts()
