#!/usr/bin/env python3
import argparse
import lxml.etree
from nullroute.core import Core
from nullroute.scrape import Scraper
from nullroute.sec import get_netrc
import os
from pprint import pprint
import requests
import subprocess
import sys
import tempfile

idrac6_template = """<?xml version="1.0" encoding="UTF-8"?>
<jnlp codebase="{URLBASE}" spec="1.0+">
  <information>
    <title>iDRAC6 Virtual Console Client</title>
    <vendor>Dell Inc.</vendor>
    <icon href="{URLBASE}/images/logo.gif" kind="splash"/>
    <shortcut online="true"/>
  </information>
  <application-desc main-class="com.avocent.idrac.kvm.Main">
    <argument>ip={IPADDRESS}</argument>
    <argument>vmprivilege=true</argument>
    <argument>helpurl={URLBASE}/help/contents.html</argument>
    <argument>title=iDRAC%20on%20{IPADDRESS}</argument>
    <argument>user={USERNAME}</argument>
    <argument>passwd={PASSWORD}</argument>
    <argument>kmport=5900</argument>
    <argument>vport=5900</argument>
    <argument>apcp=1</argument>
    <argument>version=2</argument>
  </application-desc>
  <security>
    <all-permissions/>
  </security>
  <resources>
    <j2se version="1.6+"/>
    <jar download="eager" href="{URLBASE}/software/avctKVM.jar" main="true"/>
  </resources>
  <resources arch="x86" os="Windows">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOWin32.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMWin32.jar"/>
  </resources>
  <resources arch="amd64" os="Windows">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOWin64.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMWin64.jar"/>
  </resources>
  <resources arch="x86_64" os="Windows">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOWin64.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMWin64.jar"/>
  </resources>
  <resources arch="x86" os="Linux">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOLinux32.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMLinux32.jar"/>
  </resources>
  <resources arch="i386" os="Linux">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOLinux32.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMLinux32.jar"/>
  </resources>
  <resources arch="i586" os="Linux">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOLinux32.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMLinux32.jar"/>
  </resources>
  <resources arch="i686" os="Linux">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOLinux32.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMLinux32.jar"/>
  </resources>
  <resources arch="amd64" os="Linux">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOLinux64.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMLinux64.jar"/>
  </resources>
  <resources arch="x86_64" os="Linux">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOLinux64.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMLinux64.jar"/>
  </resources>
  <resources arch="x86_64" os="Mac OS X">
    <nativelib download="eager" href="{URLBASE}/software/avctKVMIOMac64.jar"/>
    <nativelib download="eager" href="{URLBASE}/software/avctVMMac64.jar"/>
  </resources>
</jnlp>"""

class UnknownVersionError(Exception):
    pass

class LoginFailedError(Exception):
    pass

class NoConsolePrivilegeError(Exception):
    pass

class DracProber(Scraper):
    def __init__(self, host, creds):
        super().__init__(output_dir=None)
        self.address = host
        self.base_url = "https://%s" % host
        self.username = creds["login"]
        self.password = creds["password"]
        self.version = None

        # turn off SubjectAltNameWarning
        import requests.packages.urllib3
        requests.packages.urllib3.disable_warnings()

    def _post(self, path, *args, **kwargs):
        url = self.base_url + path
        Core.debug("posting to %r" % url, skip=1)
        return self.ua.post(url, *args, **kwargs)

    def _probe_path(self, path):
        url = self.base_url + path
        Core.debug("testing existence of %r" % url, skip=1)
        resp = self.ua.head(url)
        if resp.status_code == 200:
            Core.debug(" - file exists (got %r)", resp)
            return True
        elif resp.status_code in {404, 405}:
            Core.debug(" - file does not exist (got %r)", resp)
            return False
        else:
            resp.raise_for_status()

    def probe_version(self):
        if self.version:
            return self.version
        if os.environ.get("PYDRAC_VERSION"):
            return os.environ["PYDRAC_VERSION"]
        # XXX: iDRAC6 bug: HEAD responses are not blank-terminated, so .head() hangs
        # XXX: iLO4 always responds with 405
        if self._probe_path("/html/intgapp4_231.jar"):
            return "iLO4"
        if self._probe_path("/html/intgapp3_231.jar"):
            return "iLO3"
        if self._probe_path("/software/avctVMAPI_DLLLinux32.jar"):
            return "iDRAC7"
        if self._probe_path("/software/avctVMLinux32.jar"):
            return "iDRAC6-new"
        if self._probe_path("/software/jpcsc.jar"):
            return "iDRAC6-old"
        if self._probe_path("/plugins/vkvm/avctDRAC5Viewer.jar"):
            return "DRAC5"
        raise UnknownVersionError()

    def load_template_webstart(self, template):
        buf = template.format(
                URLBASE=self.base_url,
                IPADDRESS=self.address,
                USERNAME=self.username,
                PASSWORD=self.password,
              )
        buf = buf.encode()
        return buf

    def _force_j2se_version(self, jnlp, version):
        tree = lxml.etree.fromstring(jnlp)
        for tag in tree.xpath("/jnlp/resources/j2se"):
            tag.set("version", version)
        jnlp = lxml.etree.tostring(tree)
        return jnlp

    @classmethod
    def known_versions(self):
        return ["DRAC5", "iDRAC6-new", "iLO4"]

    def fetch_webstart(self):
        if self.version == "DRAC5":
            # post {user:, password:} to /cgi-bin/webcgi/login
            # Cookie: sid=...
            # vkvm?state=1 - connect
            # vkvm?state=3 - disconnect
            # fetch /cgi-bin/webcgi/vkvmjnlp - automatically connects
            Core.debug("posting credentials")
            resp = self.ua.post(self.base_url + "/cgi-bin/webcgi/login",
                                data={"user": self.username, "password": self.password})
            resp.raise_for_status()
            tree = lxml.etree.fromstring(resp.content)
            if tree.xpath("string(/drac/privilege/@console)") != "1":
                raise LoginFailedError()

            Core.debug("fetching JNLP")
            resp = self.ua.get(self.base_url + "/cgi-bin/webcgi/vkvmjnlp")
            resp.raise_for_status()
            return resp.content

        elif self.version == "iDRAC6-new":
            # the JNLP retrieval is unnecessarily complex in v6,
            # but we can pass credentials directly to the applet
            Core.debug("using JNLP template")
            return self.load_template_webstart(idrac6_template)

        elif self.version == "iLO4":
            # post {.method="login", .user_login=$username, .password=$password}
            #      to /json/login_session
            # decode json
            # set Cookie: session_key = json["session_key"]
            # fetch /html/jnlp_template.html
            Core.debug("posting credentials")
            resp = self.ua.post(self.base_url + "/json/login_session",
                                json={"method": "login",
                                      "user_login": self.username,
                                      "password": self.password})
            resp.raise_for_status()
            data = resp.json()
            if data.get("message"):
                raise LoginFailedError(data["details"])
            elif data.get("remote_cons_priv") != 1:
                raise NoConsolePrivilegeError()
            sid = data["session_key"]

            Core.debug("fetching JNLP template")
            resp = self.ua.get(self.base_url + "/html/jnlp_template.html")
            resp.raise_for_status()
            jnlp = resp.content
            jnlp = jnlp.replace(b"<script type=text/x-jqote-template id=jnlpTemplate><![CDATA[\n", b"")
            jnlp = jnlp.replace(b"\n]]></script>", b"")
            jnlp = jnlp.replace(b"<%= this.baseUrl %>", (self.base_url + "/").encode())
            jnlp = jnlp.replace(b"<%= this.langId %>", b"en")
            jnlp = jnlp.replace(b"<%= this.sessionKey %>", sid.encode())
            return jnlp

        else:
            raise Exception("unhandled version %r" % self.version)

    def run(self):
        self.temp_dir = tempfile.TemporaryDirectory(prefix="pydrac")

        self.version = self.probe_version()
        Core.info("detected version %s", self.version)

        runtime = "default-runtime"
        jnlp = self.fetch_webstart()

        if self.version == "DRAC5":
            runtime = "java-6-jre/jre"
            jnlp = self._force_j2se_version(jnlp, "1.6")
            # JNLP accepts any version (version="1.6 1.5 1.4+"),
            # but Java 7+ won't accept MD5-signed applets nor speak SSLv3
        elif self.version == "iDRAC6-new":
            runtime = "java-8-jre/jre"
            jnlp = self._force_j2se_version(jnlp, "1.8 1.7 1.6")
            # Java 9 or newer will not accept keyboard input
        else:
            runtime = "java-9-jdk"

        jnlp_path = os.path.join(self.temp_dir.name, "vkvm.jnlp")

        with open(jnlp_path, "wb") as fh:
            Core.debug("saving JNLP to %r", jnlp_path)
            fh.write(jnlp)

        cmd = ["/usr/lib/jvm/%s/bin/javaws" % runtime,
               "-wait",
               jnlp_path]
        Core.debug("launching %r", cmd)
        subprocess.run(cmd, cwd=self.temp_dir.name)

known_versions = ", ".join(DracProber.known_versions())

ap = argparse.ArgumentParser()
ap.add_argument("-v", "--version",
                help="controller version (%s)" % known_versions)
ap.add_argument("host",
                help="host or address to connect to")
args = ap.parse_args()

host = args.host
try:
    creds = get_netrc(host, service="ipmi") or \
            get_netrc(host, service="idrac") or \
            get_netrc(host, service="ilo")
except KeyError:
    Core.die("credentials for %r not found", host)

drac = DracProber(host, creds)
drac.version = args.version

try:
    drac.run()
except UnknownVersionError:
    Core.die("could not determine controller version")
except requests.exceptions.ConnectionError as e:
    Core.die("%s" % e)
