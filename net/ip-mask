#!/usr/bin/env python
import sys
from ipaddress import *
from nullroute import Core

def nprint(k, *v):
    width = 10
    print("\033[33m%*s\033[m" % (width, k), *v)
    if isinstance(v[0], IPv6Address) or isinstance(v[0], IPv6Network):
        if str(v[0]) != str(v[0].exploded):
            print(" " * width, v[0].exploded)

def addr2props(addr):
    mapping = [
        ("is_loopback", "loopback"),
        ("is_link_local", "link-local"),
        ("is_site_local", "site-local"),
        ("is_global", "global"),
        ("is_private", "private"),
        ("is_multicast", "multicast"),
        ("is_reserved", "reserved"),
        ("teredo", "Teredo"),
        ("sixtofour", "6to4"),
    ]
    props = []
    for prop, name in mapping:
        if getattr(addr, prop, False):
            props.append(name)
    return props

try:
    arg = sys.argv[1]
    if arg.startswith("/"):
        plen = int(arg[1:])
        if plen < 0:
            Core.die("prefix length must be positive")
        elif plen > 128:
            Core.die("prefix length too large for any family")

        nprint("prefix", "/%d" % plen)
        if plen <= 32:
            net = ip_network("0.0.0.0/%d" % plen)
            nprint("v4 netmask", net.netmask)
            nprint("v4 size", net.num_addresses)
        net = ip_network("::/%d" % plen)
        nprint("v6 netmask", net.netmask)
    elif "/" in arg:
        addr = ip_interface(arg)
        nprint("address", addr)
        props = addr2props(addr)
        if props:
            nprint("properties", ", ".join(props))
        print()
        net = addr.network
        nprint("network", net)
        nprint("netmask", net.netmask)
        if addr.version == 4:
            nprint("size", net.num_addresses)
        nprint("first", net.network_address)
        nprint("last", net.broadcast_address)
        print()
        nprint("next net", "%s/%s" % (net.broadcast_address + 1, net.prefixlen))
    else:
        addr = ip_address(arg)
        if addr.version == 4 and addr._is_valid_netmask(arg):
            net = ip_network("0.0.0.0/%s" % arg)
            nprint("netmask", net.netmask)
            nprint("prefix", "/%d" % net.prefixlen)
            nprint("size", net.num_addresses)
        else:
            nprint("address", addr)
            props = addr2props(addr)
            if props:
                nprint("properties", ", ".join(props))
            if addr.version == 6 and addr.teredo:
                relay, v4addr = addr.teredo
                nprint("relay", relay)
                nprint("v4 address", v4addr)
            if addr.version == 6 and addr.sixtofour:
                nprint("v4 address", addr.sixtofour)
except IndexError:
    Core.die("not enough arguments")
except ValueError as e:
    Core.die(str(e))
