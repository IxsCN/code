#!/usr/bin/env perl
use Getopt::Long;
use Net::LDAP;

my $err = 0;

my %F = (
	bold	=> "\e[1m",
	red	=> "\e[31m",
	yellow	=> "\e[33m",
	green	=> "\e[32m",
	reset	=> "\e[m",
);

%F = map {$_ => ""} keys %f if !-t 0;

sub uniq (@) { my %seen = (); grep { not $seen{$_}++ } @_; }

sub _tree_status {
	my ($tree, $status, $note) = @_;

	my %C = (
		ok => "green",
		degraded => "yellow",
		desynced => "red",
	);
	my $C = $C{$status};
	my $str = "tree '$tree' $F{bold}$F{$C}$status$F{reset}$F{$C}, $note$F{reset}";
	if ($status eq "ok") { print "$str\n"; } else { warn "$str\n"; ++$err; }
}

sub _warn {
	my ($msg) = @_;

	warn "$F{bold}$F{yellow}warning:$F{reset} $msg\n";
	++$err;
}

sub _err {
	my ($msg) = @_;

	warn "$F{bold}$F{red}error:$F{reset} $msg\n";
	++$err;
}

sub dns_srv_lookup {
	my (@domains) = @_;

	map {[split / /]->[3]}
	grep {chomp || 1}
	map {`dig +short _ldap._tcp.$_. SRV`}
	@domains;
}

sub domain_to_dn {
	my (@domains) = @_;

	map {join ",", map {"dc=$_"} split /\./, $_}
	@domains;
}

my @domains;
my @hosts;
my @trees;
my $add_from_srv = 0;

GetOptions(
	"d|domain=s" => \@domains,
	"h|host=s" => \@hosts,
	"b|base=s" => \@trees,
	"srv!" => \$add_from_srv,
);

# provide default domains and base DNs

if (!@domains) {
	@domains = ("cluenet.org", "nullroute.eu.org");
}

if (!@trees) {
	@trees = ("cn=config", domain_to_dn(@domains));
}

# if no hosts were given, or if any --host parameters start with "+", merge
# with SRV data (otherwise use *only* --host)

if (!$add_from_srv) {
	$add_from_srv = grep {s/^\+//} @hosts;
}

if (!@hosts || $add_from_srv) {
	push @hosts, dns_srv_lookup(@domains);
}

if (!@hosts) {
	_die("no servers to check");
}

for (@hosts) {
	# remove trailing period for multi-component names
	# (to properly uniq them later)
	s/\.$// if /\..+\.$/;
}

@hosts = uniq @hosts;

# scan each server

my %csns;
my %rcsns;
my $hosts = 0;

for my $host (@hosts) {
	print "querying '$host'\n";
	my $conn = Net::LDAP->new($host);
	if (!$conn) {
		_err("could not connect to '$host': $!");
		next;
	}
	$conn->bind;
	for my $base (@trees) {
		my $res = $conn->search(
				base => $base,
				scope => "base",
				filter => "(contextCSN=*)",
				attrs => ["contextCSN"]);
		if ($res->is_error) {
			_err("could not read '$base': ".$res->error_name);
			next;
		}
		if (!$res->count) {
			_err("contextCSN for '$base' is not accessible or missing");
			next;
		}
		my @csn = $res->entry(0)->get_value("contextCSN");
		my $csn = join(" ", sort(@csn));
		$csns{$base}{$host} = $csn;
		push @{$rcsns{$base}{$csn}}, $host;
	}
	$conn->unbind;
	++$hosts;
}

# show results

if ($hosts == 0) {
	_err("no reachable replicas! (out of ".@hosts.")");
	exit $err;
} elsif ($hosts == 1) {
	_warn("only one reachable replica! (out of ".@hosts.")");
} elsif ($hosts < @hosts) {
	_warn("some replicas are unreachable! (".(@hosts-$hosts)." out of ".@hosts.")");
}

for my $base (@trees) {
	my %csn = %{$csns{$base}};
	my %rcsn = %{$rcsns{$base}};
	my @partitions = keys %rcsn;
	if (@partitions == 1) {
		if ($hosts == @hosts) {
			_tree_status($base, "ok", "all CSNs identical");
		} else {
			_tree_status($base, "degraded", "reachable CSNs identical");
		}
		print "  host='$_'\n" for @{$rcsn{$partitions[0]}};
		print "  csn='$_'\n" for split(" ", $partitions[0]);
	} else {
		my $num = @partitions;
		_tree_status($base, "desynced", "$num partitions");
		for my $csn (@partitions) {
			warn "  partition ".(@partitions-$num)."\n";
			warn "    host='$_'\n" for @{$rcsn{$csn}};
			warn "    csn='$_'\n" for split(" ", $csn);
			--$num;
		}
	}
}

exit $err;
