#!/usr/bin/env bash

[ "$DEBUG" ] && set -x
set -e

msg=

have() { command -v "$1" >/dev/null; }

log() {
	msg=$*
	if [ -t 1 ]; then
		printf "\e[32m--\e[m %s\e[m\n" "$msg"
	fi
}

silent() {
	local tmp=$(mktemp /tmp/pull.XXXXXX) rc=0
	if "$@" >"$tmp" 2>&1; then
		rc=0
	else
		rc=$?
		echo "error: command '$1' returned $rc"
		echo "# log: $msg"
		echo "# cwd: $PWD"
		echo "# args: $*"
		cat "$tmp"
	fi >&2
	rm -f "$tmp"
	return $rc
}

on_master() {
	[ "$(git symbolic-ref HEAD 2>/dev/null)" = "refs/heads/master" ]
}

if [ ! "$xyzzy" ]; then
	PATH="$HOME/code/bin:$PATH"; export PATH

	if ! git var GIT_AUTHOR_IDENT >/dev/null; then
		echo "removed broken .gitconfig"
		mv -f ~/.gitconfig ~/gitconfig.bad ||
		rm -f ~/.gitconfig
	fi

	log "fetching code.git"
	cd ~/code
	silent git pull
	xyzzy=42 exec dist/pull
else
	today=$(date +%d)

	if [ $today -eq 7 ]; then
		log "compacting code.git"
		silent nice git gc
	else
		silent nice git repack -d
	fi &

	if [ -d ~/.gnupg ]; then
		log "updating authorized_keys"
		security/update-authorized-keys
	fi &

	if [ -d ~/lib/dotfiles ]; then
		log "fetching dotfiles.git"
		(
		cd ~/lib/dotfiles
		git fetch --quiet origin
		stash=true
		if on_master && git merge --quiet --ff-only origin/master; then
			stash=false
		fi
		if $stash; then
			git stash save
			git checkout -f master
			git reset --hard origin/master
		fi

		if [ $today -eq 14 ]; then
			log "compacting dotfiles.git"
			silent nice git gc
		else
			silent nice git repack -d
		fi &
		)

		log "running dotfiles/install"
		~/lib/dotfiles/install
	fi

	if [ -f ~/.k5login ] && [ ! -k ~/.k5login ]; then
		log "updating .k5login"
		security/update-k5login
	fi

	if [ -d ~/lib/rwho ]; then
		(
		cd ~/lib/rwho
		if on_master; then
			log "updating rwho"
			silent git pull --ff-only
			if agent-linux/rwho-agent.sh status >/dev/null; then
				agent-linux/rwho-agent.sh update
			fi
		else
			log "skipping rwho (not on master)"
		fi
		)
	fi &

	wait
fi
