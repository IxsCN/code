#!/usr/bin/env bash
# git-new - show new commits in a branch, based on the reflog

. lib.bash || exit

migrate_opt() {
	local old=$1 new=$2
	local val=$(git config "$old" || true)
	if [[ "$val" ]]; then
		info "migrating option '$old' -> '$new'"
		git config "$new" "$val" &&
		git config --unset "$old"
	fi
}

migrate_opt nullroute.{git.up,git-new.options}
migrate_opt nullroute.git-new.{opts,options}
migrate_opt nullroute.git-new.{args,paths}

opts=$(git config nullroute.git-new.options || true)
paths=$(git config nullroute.git-new.paths || true)

if [[ -t 1 ]] && which tig >/dev/null 2>&1; then
	cmd='tig'
else
	cmd='git lg'
fi

ref=${1:-HEAD}

if [[ $ref != HEAD ]]; then
	# explicit check is faster than letting tig do it
	if ! git rev-parse --verify "$ref" >/dev/null 2>&1; then
		echo "error: bad ref '$ref'" >&2
		exit 1
	fi
fi

exec $cmd $opts "^$ref@{1}" "$ref" "${@:2}" -- $paths
