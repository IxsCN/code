#!/usr/bin/env perl
# kc - Kerberos credential cache juggler
# For cache switching to work, kc.sh must be sourced.
use warnings;
use strict;
use feature qw(say state);
use English;
use File::Basename;
use File::stat;
use File::Temp qw(tempfile);
use Nullroute::Lib;

my $rundir;
my $ccprefix;
my $runprefix;
my $cccurrent;
my $ccenviron;
my $ccdefault;
my $cccdir;
my $cccprimary;
my @caches;

my $can_switch = 1;

sub usage {
	say for
	"Usage: $::arg0",
	"       $::arg0 <name>|\"@\" [kinit_args]",
	"       $::arg0 <number>",
	"       $::arg0 {list|slist}",
	"       $::arg0 purge",
	"       $::arg0 destroy <name|number>...";
}

sub _debugvar {
	my ($var, $val) = @_;
	@_ = ($var."='".($val//"")."'");
	goto &_debug;
}

sub which {
	my ($name) = @_;
	state %paths;

	return $name if $name =~ m|/|;

	if (!exists $paths{$name}) {
		($paths{$name}) = grep {-x}
				map {"$_/$name"}
				map {$_ || "."}
				split(/:/, $ENV{PATH});
	}

	return $paths{$name};
}

sub run_proc {
	my (@argv) = @_;

	$argv[0] = which($argv[0]);

	return system(@argv);
}

sub read_proc {
	my (@argv) = @_;
	my ($proc, $pid, $output);

	$argv[0] = which($argv[0]);

	$pid = open($proc, "-|") // _die("could not fork: $!");

	if (!$pid) {
		no warnings;
		open(STDERR, ">/dev/null");
		exec({$argv[0]} @argv);
		_die("could not exec $argv[0]: $!");
	}

	chomp($output = <$proc> // "");
	close($proc);

	return $output;
}

sub read_file {
	my ($path) = @_;
	my $output;

	open(my $file, "<", $path) or _die("could not open $path: $!");
	chomp($output = <$file>);
	close($file);

	return $output;
}

sub get_keytab_path {
	my ($princ) = @_;

	# TODO: depend on hostname
	"$ENV{HOME}/Private/keys/login/krb-$princ.keytab";
}

sub read_aliases_from_file {
	my ($path, $aliases) = @_;

	_debug("reading aliases from '$path'");
	open(my $file, "<", $path) or return;
	while (my $line = <$file>) {
		next if $line =~ /^#/;
		chomp $line;
		my ($alias, @args) = split(/\s+/, $line);
		if (@args) {
			my %vars = (
				PRINCIPAL => $args[0],
				KEYTAB => get_keytab_path($args[0]),
			);
			for (@args) {
				s|^~/|$ENV{HOME}/|;
				s|\$\{([A-Z]+)\}|$vars{$1}|g;
			}
			$aliases->{$alias} = \@args;
		} else {
			warn "$path:$.: not enough parameters\n";
		}
	}
	close($file);
}

sub read_aliases {
	my @paths = (
		"$ENV{HOME}/lib/dotfiles/k5aliases",
		"$ENV{HOME}/lib/k5aliases",
	);
	my %aliases;

	for my $path (@paths) {
		read_aliases_from_file($path, \%aliases);
	}

	return %aliases;
}

sub enum_ccaches {
	my @ccaches;

	open(my $proc, "-|", which("pklist"), "-l", "-N")
	or _die("could not run 'pklist': $!");
	push @ccaches, grep {chomp or 1} <$proc>;
	close($proc);

	# traditional

	push @ccaches,	map {"FILE:$_"}
			grep {
				my $st = stat($_);
				-f $_ && $st->uid == $UID
			}
			glob("/tmp/krb5cc*");

	# new

	if (-d "$rundir/krb5cc") {
		push @ccaches,	map {"DIR::$_"}
				glob("$rundir/krb5cc/tkt*");

		push @ccaches,	map {"DIR::$_"}
				glob("$rundir/krb5cc_*/tkt*");
	}

	# Heimdal kcmd

	if (-S "/var/run/.heim_org.h5l.kcm-socket") {
		push @ccaches, "KCM:$UID";
	}

	# kernel keyrings

	my @keys = uniq map {split} grep {chomp or 1}
		   qx(keyctl rlist \@s 2>/dev/null),
		   qx(keyctl rlist \@u 2>/dev/null);
	for my $key (@keys) {
		my $desc = read_proc("keyctl", "rdescribe", $key);
		if ($desc =~ /^keyring;.*?;.*?;.*?;(krb5cc\.*)$/) {
			push @ccaches, "KEYRING:$1";
		}
	}

	# filter out invalid ccaches

	@ccaches = grep {run_proc("pklist", "-q", "-c", $_) == 0} @ccaches;

	# special ccaches (never filtered)

	my $have_current = grep {$_ eq $cccurrent} @ccaches;
	if (!$have_current) {
		push @ccaches, $cccurrent;
	}

	if (length $ccenviron) {
		my $have_environ = grep {ccache_is_environ($_)} @ccaches;
		if (!$have_environ) {
			push @ccaches, $ccenviron;
		}
	} else {
		my $have_default = grep {ccache_is_default($_)} @ccaches;
		if (!$have_default) {
			push @ccaches, $ccdefault;
		}
	}

	@ccaches = uniq sort @ccaches;

	return @ccaches;
}

sub expand_ccname {
	my ($name) = @_;
	for ($name) {
		if (m|^new$|) {
			my (undef, $path) = tempfile($ccprefix."XXXXXX", OPEN => 0);
			return "FILE:$path";
		}
		elsif (m|^@?$|) {
			return $ccdefault;
		}
		elsif (m|^KCM$|i) {
			return "KCM:$UID";
		}
		elsif (m|^\d\d?$|) {
			my $i = int $_;
			if ($i > 0 && $i <= @caches) {
				return $caches[$i - 1];
			}
		}
		# ^^ and ^
		elsif (m|^\^\^?$|) {
			return "KEYRING:krb5cc";
		}
		# ^^foo
		elsif (m|^\^\^(.+)$|) {
			return "KEYRING:$1";
		}
		# ^foo
		elsif (m|^\^(.+)$|) {
			return "KEYRING:krb5cc.$1";
		}
		# +foo
		elsif (m|^\+$|) {
			return "DIR:$cccdir";
		}
		elsif (m|^\+(.*)$|) {
			return "DIR::$cccdir/tkt$1";
		}
		# :foo/bar
		elsif (m|^:(.+)/$|) {
			return "DIR:$runprefix"."_$1";
		}
		elsif (m|^:(.+)/(.+)$|) {
			return "DIR::$runprefix"."_$1/tkt$2";
		}
		# :foo
		elsif (m|^:$|) {
			return "DIR:$runprefix";
		}
		elsif (m|^:(.+)$|) {
			return "DIR::$runprefix/tkt$1";
		}
		# any
		elsif (m|:|) {
			return $_;
		}
		elsif (m|/|) {
			return "FILE:$_";
		}
		else {
			return "FILE:$ccprefix$_";
		}
	}
}

sub collapse_ccname {
	my ($name) = @_;
	for ($name) {
		if ($_ eq $ccdefault) {
			return "@";
		}
		elsif (m|^DIR::\Q$runprefix\E_(.+)/tkt(.*)$|) {
			return ":$1/$2";
		}
		elsif (m|^DIR::\Q$runprefix\E/tkt(.*)$|) {
			return ":$1";
		}
		elsif (m|^DIR::\Q$cccdir\E/tkt(.*)$|) {
			return "+$1";
		}
		elsif (m|^FILE:\Q$ccprefix\E(.*)$|) {
			return $1;
		}
		elsif (m|^FILE:(/.*)$|) {
			return $1;
		}
		#elsif ($_ eq "API:$principal") {
		#	return "API:";
		#}
		elsif ($_ eq "KCM:$UID") {
			return "KCM";
		}
		elsif ($_ eq "KEYRING:krb5cc") {
			return "^";
		}
		elsif (m|^KEYRING:krb5cc\.(.+)$|) {
			return "^$1";
		}
		elsif (m|^KEYRING:(.*)$|) {
			return "^^$1";
		}
		else {
			return $_;
		}
	}
}

sub cmp_ccnames {
	my ($a, $b) = @_;
	my $primary = "tkt";

	$a = "FILE:$a" unless $a =~ /:/;
	$b = "FILE:$b" unless $b =~ /:/;

	return 1 if $a eq $b;

	if ($a =~ /^DIR:([^:].*)$/) {
		if (-e "$1/primary") {
			$primary = read_file("$1/primary");
		}
		return 1 if $b eq "DIR::$1/$primary";
	}

	if ($b =~ /^DIR:([^:].*)$/) {
		if (-e "$1/primary") {
			$primary = read_file("$1/primary");
		}
		return 1 if $a eq "DIR::$1/$primary";
	}

	return 0;
}

sub ccache_is_default { cmp_ccnames(shift, $ccdefault); }

sub ccache_is_environ { cmp_ccnames(shift, $ccenviron); }

sub ccache_is_current { cmp_ccnames(shift, $cccurrent); }

sub put_env {
	my ($key, $val) = @_;
	$ENV{$key} = $val;

	for ($ENV{SHELL}) {
		if (m{/(sh|bash|zsh)$}) {
			$val =~ s/'/'\\''/g;
			say EVAL "$key=\'$val\'; export $key;";
		}
		else {
			_warn("unrecognized shell \"$ENV{SHELL}\"");
			say EVAL "$key=$val";
		}
	}
}

sub find_ccache_for_principal {
	my ($arg) = @_;

	my $max_expiry = 0;
	my $max_ccname;

	for my $ccname (@caches) {
		my $principal;
		my $ccrealm;
		my $expiry;
		my $tgt_expiry;
		my $init_expiry;

		$principal = read_proc("pklist", "-P", "-c", $ccname);
		if ($principal ne $arg) {
			next;
		}
		if ($principal =~ /.*@(.+)$/) {
			$ccrealm = $1;
		}

		open(my $proc, "-|", which("pklist"), "-c", $ccname)
		or _die("could not run 'pklist': $!");
		while (my $line = <$proc>) {
			chomp($line);
			my @l = split(/\t/, $line);
			for (shift @l) {
				if ($_ eq "ticket") {
					my ($t_client, $t_service, undef, $t_expiry, undef, $t_flags) = @l;
					if ($t_service eq "krbtgt/$ccrealm\@$ccrealm") {
						$tgt_expiry = $t_expiry;
					}
					if ($t_flags =~ /I/) {
						$init_expiry = $t_expiry;
					}
				}
			}
		}
		close($proc);

		$expiry = $tgt_expiry || $init_expiry;
		if ($expiry > $max_expiry) {
			$max_expiry = $expiry;
			$max_ccname = $ccname;
		}
	}

	return ($max_ccname, $max_expiry);
}

sub switch_ccache {
	my ($ccname) = @_;

	return 0 if !$can_switch;

	for ($ccname) {
		if (m|^DIR::(.+)$|) {
			my $ccdirname = "DIR:".dirname($1);
			put_env("KRB5CCNAME", $ccdirname);
			run_proc("kswitch", "-c", $ccname);
		}
		elsif (m|^KEYRING:(.*)$|) {
			my $keyname = $1;
			if (system(qq(keyctl request keyring "$keyname" > /dev/null 2>&1)) > 0) {
				# Hack around something that loses keys added to @s if it equals @us
				# TODO: deshell
				chomp(my $sdesc = qx(keyctl rdescribe \@s 2> /dev/null));
				chomp(my $udesc = qx(keyctl rdescribe \@us 2> /dev/null));
				my $keyring = ($sdesc eq $udesc) ? '@us' : '@s';
				# TODO: deshell
				system(qq(keyctl newring "$keyname" "$keyring" > /dev/null));
			}
			put_env("KRB5CCNAME", $ccname);
		}
		else {
			put_env("KRB5CCNAME", $ccname);
		}
	}

	if (run_proc("pklist", "-q") == 0) {
		my $princ = read_proc("pklist", "-P");
		say "Switched to \e[1m$princ\e[m ($ccname)";
	} else {
		say "New ccache ($ccname)";
	}

	return 1;
}

sub do_print_ccache {
	my ($ccname, $num) = @_;

	my $valid;
	my $shortname;
	my $principal;
	my $ccrealm;
	my $expiry;
	my $tgt_expiry;
	my $init_service;
	my $init_expiry;

	my $expiry_str = "";
	my $expiry_color = "";
	my $item_flag = "";
	my $flag_color = "";
	my $name_color = "";
	my $princ_color = "";
	my $service_color = "35";

	my $num_tickets;

	$shortname = collapse_ccname($ccname);

	_debug("examining ccache '$ccname' aka '$shortname'");

	if (ccache_is_current($ccname)) {
		$item_flag = "â€£";
	}

	$valid = run_proc("pklist", "-q", "-c", $ccname) == 0;
	if (!$valid) {
		my $bold = ccache_is_current($ccname) ? "1;" : "";
		$principal = "(none)";
		$expiry_str = "(empty)";
		$flag_color = $bold."35";
		$name_color = $bold."35";
		$princ_color = $bold."35";
		$expiry_color = "35";
		goto do_print;
	}

	open(my $proc, "-|", which("pklist"), "-c", $ccname)
	or _die("could not run 'pklist': $!");
	while (<$proc>) {
		chomp;
		my @l = split(/\t/, $_);
		_debug("- pklist output: '@l'");
		for (shift @l) {
			if ($_ eq "principal") {
				($principal) = @l;

				if ($principal =~ /.*@(.+)$/) {
					$ccrealm = $1;
				}
			}
			elsif ($_ eq "ticket") {
				my ($t_client, $t_service, undef,
					$t_expiry, undef, $t_flags, undef) = @l;

				if ($t_service eq "krbtgt/$ccrealm\@$ccrealm") {
					$tgt_expiry = $t_expiry;
				}
				if ($t_flags =~ /I/) {
					$init_service = $t_service;
					$init_expiry = $t_expiry;
				}

				++$num_tickets;
			}
		}
	}
	close($proc);

	if (!defined $principal) {
		_debug("no client principal in output, skipping ccache");
		return 0;
	}

	if (!$num_tickets) {
		my $bold = ccache_is_current($ccname) ? "1;" : "";
		$expiry_str = "(empty)";
		$flag_color = $bold."35";
		$name_color = $bold."35";
		$princ_color = $bold."35";
		$expiry_color = "35";
		goto do_print;
	}

	$expiry = $tgt_expiry || $init_expiry || 0;

	if ($expiry) {
		if ($expiry <= time) {
			$expiry_str = "expired";
			$expiry_color = "31";
			$item_flag //= "Ã—";
			$flag_color = "1;31";
		} else {
			_debug("- expires in ".($expiry - time)." seconds");
			$expiry_str = interval($expiry);
			$expiry_color = ($expiry <= time +  300) ? "1;33"
			              : ($expiry <= time + 1200) ? "33"
			              : "";
		}
	}

	if ($ccname eq $cccurrent) {
		$flag_color = ($expiry <= time) ? "1;31" : "1;32";
		$name_color = $flag_color;
		$princ_color = $name_color;
	} else {
		$princ_color ||= "38;5;66";
	}

do_print:
	_debugvar("init_service", $init_service);
	_debugvar("ccrealm", $ccrealm);

	if (defined $ccrealm && $ccrealm eq "WELLKNOWN:ANONYMOUS"
	    && $init_service =~ /^krbtgt\/.*@(.+)$/) {
		$ccrealm = $1;
		$principal = "\@$1 (anonymous)";
	}

	printf "\e[%sm%1s\e[m %2d ", $flag_color, $item_flag, $num+1;
	printf "\e[%sm%-15s\e[m", $name_color, $shortname;
	if (length $shortname > 15) {
		printf "\n%20s", "";
	}
	printf " \e[%sm%-40s\e[m", $princ_color, $principal;
	printf " \e[%sm%8s\e[m", $expiry_color, $expiry_str;
	print "\n";

	if (defined $ccrealm && defined $init_service
	    && $init_service ne "krbtgt/".$ccrealm."@".$ccrealm) {
		printf "%20s", "";
		printf " for \e[%sm%s\e[m\n", $service_color, $init_service;
	}

	return 1;
}

if (!which("pklist")) {
	_die("'pklist' must be installed to use this tool");
}

open(EVAL, ">&=", 3) or do {
	_warn("cache switching unavailable (could not open fd#3)");
	$can_switch = 0;
	open(EVAL, ">/dev/null");
};

$rundir = $ENV{XDG_RUNTIME_DIR} || $ENV{XDG_CACHE_HOME} || $ENV{HOME}."/.cache";
$ccprefix = "/tmp/krb5cc_${UID}_";
$runprefix = "$rundir/krb5cc";

chomp($cccurrent = qx(pklist -N));
chomp($ccdefault = qx(unset KRB5CCNAME; pklist -N));
$ccenviron = $ENV{KRB5CCNAME} // "";

$cccdir = "";
$cccprimary = "";
if (-d $runprefix) {
	$cccdir = $runprefix;
}
if ($cccurrent =~ m|^DIR::(.+)$|) {
	$cccdir = dirname($1);
	if (-f "$cccdir/primary") {
		$cccprimary = read_file("$cccdir/primary");
	} else {
		$cccprimary = "tkt";
	}
}

@caches = enum_ccaches();

my $cmd = shift @ARGV;

for ($cmd) {
	if (!defined $_) {
		my $num = 0;
		for my $ccname (@caches) {
			$num += do_print_ccache($ccname, $num);
		}
		if (!$num) {
			say "No Kerberos credential caches found.";
			exit 1;
		}
	}
	elsif (/^--help$/) {
		usage();
		exit;
	}
	elsif ($_ eq "purge") {
		for my $ccname (@caches) {
			my $principal = read_proc("pklist", "-c", $ccname, "-P");
			say "Renewing credentials for $principal in $ccname";
			run_proc("kinit", "-c", $ccname, "-R") == 0
			|| run_proc("kdestroy", "-c", $ccname);
		}
	}
	elsif ($_ eq "destroy") {
		my @destroy = grep {defined} map {expand_ccname($_)} @ARGV;
		run_proc("kdestroy", "-c", $_) for @destroy;
	}
	elsif ($_ eq "clean") {
		say "Destroying all credential caches.";
		run_proc("kdestroy", "-c", $_) for @caches;
	}
	elsif ($_ eq "expand") {
		say expand_ccname($_) for @ARGV;
	}
	elsif ($_ eq "list") {
		say for @caches;
	}
	elsif ($_ eq "slist") {
		say collapse_ccname($_) for @caches;
	}
	elsif ($_ eq "trace") {
		$ENV{KRB5_TRACE} = "/dev/stderr";
		system {$ARGV[0]} @ARGV;
	}
	elsif ($_ eq "test-roundtrip") {
		for my $name (@caches) {
			my $tmp;
			say " original: ", ($tmp = $name);
			say "collapsed: ", ($tmp = collapse_ccname($tmp));
			say " expanded: ", ($tmp = expand_ccname($tmp));
			say "   result: ", ($tmp eq $name ? "\e[1;32mPASS\e[m"
			                                  : "\e[1;31mFAIL\e[m");
			say "";
		}
	}
	elsif ($_ eq "dump-aliases") {
		my %aliases = read_aliases();
		for (sort keys %aliases) {
			say $_."\t-> ".join(" ", @{$aliases{$_}});
		}
	}
	elsif (/^=(.*)$/) {
		my %aliases = read_aliases();
		my $alias = $aliases{$1};
		if (!defined $alias) {
			_die("alias '$1' not defined");
			exit 1;
		}
		my $ccname = expand_ccname($1);
		switch_ccache($ccname);
		if (run_proc("klist", "-s") > 0) {
			exit run_proc("kinit", @$alias) >> 8;
		}
	}
	elsif (/.+@.+/) {
		my ($ccname, $expiry) = find_ccache_for_principal($cmd);
		if ($expiry) {
			switch_ccache($ccname) || exit 1;
		} else {
			switch_ccache("new") || exit 1;
			run_proc("kinit", $cmd, @ARGV);
		}
	}
	else {
		my $ccname = expand_ccname($cmd);
		if (defined $ccname) {
			switch_ccache($ccname) || exit 1;
			run_proc("kinit", @ARGV) if @ARGV;
		} else {
			exit 1;
		}
	}
}
