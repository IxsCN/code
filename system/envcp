#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import subprocess

try:
    from nullrute.core import Core
except ImportError:
    class Core:
        @classmethod
        def warn(self, fmt, *args):
            print("warning:", fmt % args, file=sys.stderr)

        @classmethod
        def die(self, fmt, *args):
            print("fatal:", fmt % args, file=sys.stderr)
            sys.exit(1)

def usage():
    print("Usage: envcp <pid> <command> [args ...]",
          file=sys.stderr)
    sys.exit(2)

def read_env(pid):
    env = None
    try:
        with open("/proc/%d/environ" % pid, "rb") as fd:
            env = parse_env(fd)
    except IOError as e:
        Core.warn("could not access environment directly, using sudo: %s" % e)
        with subprocess.Popen(["sudo", "cat", "/proc/%d/environ" % pid],
                              stdout=subprocess.PIPE) as proc:
            env = parse_env(proc.stdout)
    return env

def parse_env(fd):
    env = fd.read().split(b'\0')
    return dict(k.split(b'=', 1) for k in env if k != b'')

try:
    pid = int(sys.argv[1])
    cmd = sys.argv[2:]
except IndexError:
    usage()
except ValueError:
    Core.die("pid must be an integer")

if not len(cmd):
    cmd = ["/usr/bin/env"]

env = read_env(pid)

if not env:
    Core.warn("environment appears to be empty")

os.execvpe(cmd[0], cmd, env)
