#!/usr/bin/env perl
# trash - move files into XDG Trash
use v5.10;
use warnings;
use strict;
use Cwd qw(realpath);
use Errno qw(:POSIX);
use Fcntl;
use File::Basename qw(basename dirname);
use File::Path qw(make_path);
use File::Spec::Functions;
use Getopt::Long qw(:config bundling no_ignore_case);
use Nullroute::Lib;
use POSIX qw(strftime);

my $verbose = 1;
my $interactive = 0;

sub confirm {
	print "$::arg0: @_ "; $|++; <STDIN> =~ /^y/i;
}

sub dev {
	my ($path, $fatal) = @_;

	my @stat = lstat($path);
	if ($fatal && !@stat) {
		_die("could not stat '$path': $!");
	}
	return $stat[0];
}

=item path_encode($str)

=cut

sub path_encode {
	my ($str) = @_;

	# RFC 2396 section 2 (mostly)
	$str =~ s/[^A-Za-z0-9_.!~*'();?:@&=+,-]/sprintf("%%%02X", ord($&))/seg;
	return $str;
}

=item path_decode($str)

=cut

sub path_decode {
	my ($str) = @_;

	$str =~ s/%([0-9A-Fa-f]{2})/chr(hex($1))/seg;
	return $str;
}

=item my_abs_path($path)

Canonicalize symlinks and relative paths.
If $path itself is a symlink, do not canonicalize it.

=cut

sub my_abs_path {
	my ($path) = @_;
	my $b = basename($path);
	my $d = dirname($path);
	my $rd = realpath($d);
	_debug("abs: dir='$d' realdir='$rd' base='$b'");
	return $rd."/".$b;
}

=item abs2rel_down($path)

=cut

sub abs2rel_down {
	my ($path, $base) = @_;
	my $rp = File::Spec->abs2rel($path, $base);
	return ($rp =~ /^\.\.\//) ? $path : $rp;
}

=item find_root($abs_path)

Find the root directory of the filesystem $path is in.

Does not currently work with bind-mounted files; returns the mountpoint's parent.

=cut

sub find_root {
	my ($path) = @_;
	_debug("finding root for '$path'");
	my $fdev = dev($path);
	return undef if !defined $fdev;
	my $prev = $path;
	while ($path ne "/") {
		$prev = $path;
		$path = dirname($path);
		return $prev if dev($path) != $fdev;
	}
	return $path;
}

=item ensure($trash_dir)

Recursively mkdir $trash_dir/{files,info} if necessary.

=cut

sub ensure {
	my ($trash_dir) = @_;
	_debug("preparing trash directory '$trash_dir'");
	for ($trash_dir, "$trash_dir/info", "$trash_dir/files") {
		next     if -d $_;
		return 0 if -e $_;
		_debug("- creating '$_'");
		make_path($_, {mode => 0700}) or return 0;
	}
	return 1;
}

=item xdev_move($source, $dest) -> $success

Copy a file or directory $source to $dest recursively and delete the originals.

=cut

sub xdev_move {
	my ($source, $dest) = @_;
	my @opt;
	_debug("xdev_move: source='$source'");
	_debug("xdev_move: dest='$dest'");

	_info("copying '$source' to \$HOME...");
	@opt = qw(-a -H -A -X);
	if ($::debug) { push @opt, qw(-v -h); }
	system("rsync", @opt, "$source", "$dest") == 0
		or return 0;

	_info("removing '$source' after copying...");
	@opt = qw(-r -f);
	if ($::debug) { push @opt, qw(-v); }
	system("rm", @opt, $source) == 0
		or return 0;

	return 1;
}

=item create_info($trash_dir, $orig_path) -> ($name, $fh, $path)

Securely create a .trashinfo file in $trash_dir with a basename similar
to that of $orig_path; return the new basename, a writable filehandle,
and for convenience the full path to the file.

=cut

sub create_info {
	my ($trash_dir, $orig_path) = @_;
	my $base = basename($orig_path);
	my $i = 0;
	my ($name, $fh, $info_path);
	while ($i < 1000) {
		$name = $i ? "$base-$i" : $base;
		$info_path = "$trash_dir/info/$name.trashinfo";
		if (sysopen($fh, $info_path, O_WRONLY|O_CREAT|O_EXCL)) {
			_debug("found free info_path='$info_path'");
			return ($name, $fh, $info_path);
		} elsif ($! == EEXIST) {
			_debug("'$name.trashinfo' already exists, trying next...")
				if ($i % 25 == 0);
		} else {
			_err("cannot create '$info_path' ($!)");
			return undef;
		}
		++$i;
	}
	_debug("giving up after $i failures");
	_err("cannot create .trashinfo file (too many items named '$base')");
	return undef;
}

=item write_info($fh, $orig_path)

Write the [Trash Info] block for $orig_path to a filehandle.

=cut

sub write_info {
	my ($info_fh, $orig_path) = @_;

	my $path = path_encode($orig_path);
	my $now = strftime("%Y-%m-%dT%H:%M:%S%z", localtime);

	print $info_fh "[Trash Info]\n";
	print $info_fh "Path=$path\n";
	print $info_fh "DeletionDate=$now\n";
}

=item pase_date($iso8601_str)

=cut

sub parse_date {
	my ($str) = @_;

	my $r = qr/^
		(\d+) - 0*(\d+) - 0*(\d+)
		T 0*(\d+) : 0*(\d+) (?: : 0*(\d+) )?
		(?: \+ \d{4} )?
		$/x;

	if (my @m = $str =~ $r) {
		my ($dy, $dm, $dd, $th, $tm, $ts, $tz) = map {int($_ // 0)} @m;
		return POSIX::mktime($ts, $tm, $th, $dd, $dm-1, $dy-1900);
	} else {
		return 0;
	}
}

=item read_info($file)

=cut

sub read_info {
	my ($info_path) = @_;

	my ($info_fh, $orig_path, $trash_time);

	if (!open($info_fh, "<", $info_path)) {
		_err("could not read \"$info_path\": $!");
		return;
	}
	for (<$info_fh>) {
		if ($. == 1 && !/^\[Trash Info\]$/) {
			_err("syntax error in \"$info_path\"");
			last;
		} elsif (!defined($orig_path) && /^Path=(.+)$/) {
			$orig_path = path_decode($1);
		} elsif (!defined($trash_time) && /^DeletionDate=(.+)$/) {
			$trash_time = parse_date($1);
		}
	}
	close($info_fh);

	return {
		info => $info_path,
		orig => $orig_path,
		date => $trash_time,
	};
}

sub find_unique {
	my ($base) = @_;
	my $path = $base;
	my $i = 1;
	while (-e $path) {
		$path = $base."-".$i++;
		_die("could not find unique name for \"$base\"") if $i > 1_000;
	}
	return $path;
}

sub restore_from_info {
	my ($info) = @_;

	my $info_path = $info->{info};
	my $orig_path = $info->{orig};

	my $trash_dir = dirname(dirname($info_path));
	my $info_base = basename($info_path, ".trashinfo");
	my $trashed_path = "$trash_dir/files/$info_base";

	_debug("- info: '$info_path'");
	_debug("  original: '$orig_path'");
	_debug("  trashed: '$trashed_path'");

	my $orig_dir = dirname($orig_path);
	if (!-d $orig_dir) {
		_debug("creating parent directory '$orig_dir'");
		make_path($orig_dir);
	}

	$orig_path = find_unique($orig_path);

	if (dev($orig_dir, 1) == dev($trash_dir, 1)) {
		if (rename($trashed_path, $orig_path)) {
			unlink($info_path);
			_info("restored '".abs2rel_down($orig_path)."'");
		} else {
			_die("failed to rename '$trashed_path': $!");
		}
	} else {
		if (xdev_move($trashed_path, $orig_path)) {
			unlink($info_path);
			_info("restored '$orig_path'");
		} else {
			_die("failed to copy '$trashed_path' to '$orig_dir'");
		}
	}
}

sub find_home_trash {
	return ($ENV{XDG_DATA_HOME} // $ENV{HOME}."/.local/share") . "/Trash";
}

=item find_trash_dir($orig_path)

Find the best trash directory to use, according to XDG Trash Dir spec.

 * $home_trash if same device
 * $root/.Trash/$UID if checks pass
 * $root/.Trash-$UID if exists or can create
 * $home_trash otherwise

=cut

sub find_trash_dir {
	my ($orig_path) = @_;
	_debug("finding trash directory for '$orig_path'");
	if (!file_name_is_absolute($orig_path)) {
		_die("BUG: find_trash_dir('$orig_path') called with relative path");
	}

	my $fdev = dev($orig_path);
	while (!defined $fdev) {
		$orig_path = dirname($orig_path);
		_debug("...path not found, using parent '$orig_path'");
		$fdev = dev($orig_path);
	}

	my $home_trash = find_home_trash();
	ensure($home_trash);
	my $hdev = dev($home_trash);

	if (!defined $fdev) {
		return undef;
	} elsif ($fdev == $hdev) {
		return $home_trash;
	} else {
		my $root = find_root($orig_path);
		my $dir = catdir($root, ".Trash");
		if (-d $dir && ! -l $dir && -k $dir && ensure("$dir/$<")) {
			return "$dir/$<";
		}
		$dir = catdir($root, ".Trash-$<");
		if (-d $dir || ensure($dir)) {
			return $dir;
		}
	}
	return $home_trash;
}

=item trash($path)

Create a trashinfo file in the appropriate trash directory, then move
actual $path there. If move fails, delete trashinfo and explode.

=cut

sub trash {
	my ($path) = @_;
	if (!lstat($path)) {
		_err("not found: '$path'");
		return;
	}
	if ($interactive) {
		confirm("Kill file \e[33m$path\e[m?") || return;
	}

	my $orig_path = my_abs_path($path);
	_debug("orig_path='$orig_path'");
	if (!-l $orig_path && -d $orig_path && !-w $orig_path) {
		# moving a directory involves updating its ".." entry
		_err("no write permission to '$orig_path'");
	}

	my $orig_dir = dirname($orig_path);
	_debug("orig_dir='$orig_dir'");
	if (!-w $orig_dir) {
		_err("no write permission to parent directory '$orig_dir'");
	}

	my $trash_dir = find_trash_dir($orig_path);
	_debug("trash_dir='$trash_dir'");
	ensure($trash_dir);

	my ($name, $info_fh, $info_name) = create_info($trash_dir, $orig_path);
	if (!$info_fh) {
		_err("failed to move '$path' to trash");
		return;
	}
	# TODO: orig_path needs to be relative to mtpt for removable drives
	write_info($info_fh, $orig_path);

	my $trashed_path = "$trash_dir/files/$name";
	if (dev($orig_path) == dev($trash_dir)) {
		_debug("renaming file on same device");
		_debug("... from '$orig_path'");
		_debug("... to '$trashed_path'");
		if (rename($orig_path, $trashed_path)) {
			_info("trashed '$path'");
		} else {
			my $err = "$!";
			_debug("rename failed, unlinking info '$info_name'");
			unlink($info_name);
			_die("failed to rename '$path': $err");
		}
	} else {
		_debug("cross-device moving to '$trashed_path'");
		if (xdev_move($orig_path, $trashed_path)) {
			_info("trashed '$path' to \$HOME");
		} else {
			_debug("xdev_move failed, unlinking info '$info_name'");
			unlink($info_name);
			_die("failed to copy '$path' to '$trash_dir'");
		}
	}
	close($info_fh);
}

sub ls {
	my ($dir, $match) = @_;
	my $dh;
	if (!opendir($dh, $dir)) {
		_err("could not read \"$dir\": $!");
		return;
	}
	my @files =
		map {"$dir/$_"}
		grep {!$match || $_ =~ $match}
		readdir($dh);
	closedir($dh);
	return @files;
}

sub untrash {
	my ($path) = @_;
	my $orig_path = my_abs_path($path);
	_debug("orig_path='$orig_path'");
	my $orig_dir = dirname($orig_path);
	_debug("orig_dir='$orig_dir'");
	my $trash_dir = find_trash_dir($orig_path);
	_debug("trash_dir='$trash_dir'");
	if (!-d "$trash_dir/info" || !-d "$trash_dir/files") {
		_err("trash directory does not exist");
		return;
	}

	my @infos;
	for my $info_path (sort + ls("$trash_dir/info", qr/\.trashinfo$/)) {
		_debug("examining '$info_path'");
		my $info = read_info($info_path);
		if (!defined $info->{orig}) {
			next;
		} elsif (-d $orig_path) {
			my $info_orig_dir = dirname($info->{orig});
			next if $orig_dir ne $info_orig_dir;
		} else {
			next if $orig_path ne $info->{orig};
		}
		_debug("found \"$info->{orig}\" time $info->{date}");
		push @infos, $info;
	}

	if (!@infos) {
		_err("no matching files in trash");
		return;
	}

	@infos = sort {$a->{date} <=> $b->{date}} @infos;
	my $info = $infos[0];
	my $age = interval($info->{date});
	if (@infos == 1) {
		_info("found one matching file ($age ago), restoring");
	} else {
		_info("found ".@infos." files, restoring most recent ($age ago)");
	}
	restore_from_info($info);
}

sub usage {
	say for
	"Usage: $::arg0 [options] <file>...",
	"",                       #
	"  -f, --force            Ignored (compatibility with `rm`)",
	"  -i, --[no-]interactive Prompt before removing a file",
	"  -r, --recursive        Ignored (compatibility with `rm`)",
	"  -v, --[no-]verbose     Show files being removed",
	"",
	"      --find-trash       Only print the trash directory",
	"      --restore          Restore files from trash";
}

# Option parser

my $opt_du = 0;
my $opt_empty = 0;
my $print_path = 0;
my $restore = 0;

GetOptions(
	'help'		=> sub { usage(); exit; },
	'du'		=> \$opt_du,
	'empty'		=> \$opt_empty,
	'find-trash!'	=> \$print_path,
	'f|force'	=> sub { },
	'i|interactive!'=> \$interactive,
	'restore!'	=> \$restore,
	'r|R|recursive'	=> sub { },
	'v|verbose!'	=> \$verbose,
) or exit 2;

if ($opt_du) {
	exit system("du", "-hs", find_home_trash());
} elsif ($opt_empty) {
	# yeah I'm lazy
	exit system("gvfs-trash", "--empty");
}

if (!@ARGV) {
	_die("no files given");
}

# Main code

if ($print_path) {
	say find_trash_dir(my_abs_path($_)) // "(not found?)" for @ARGV;
} elsif ($restore) {
	untrash($_) for @ARGV;
} else {
	trash($_) for @ARGV;
}

_exit();
