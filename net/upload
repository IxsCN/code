#!/usr/bin/env bash

. lib.bash || exit
. libks.bash || exit

usage() {
	echo "Usage: $progname [options] <file>…"
	echo #|---'---|---'---|
	echo "  -0            do not use yearly subdirectories"
	echo "  -1            upload to fs1 instead of main site"
	echo "  -c            continue upload / overwrite file"
	echo "  -d path       create a subdirectory"
	echo "  -s regex      mangle (sed) the destination filename"
	echo "  -X            delete files instead of uploading"
}

r:test() {
	local test=$1 host=${2%%:*} path=${2#*:}
	ks:sshrun "$host" test $test "$path"
}

r:mkdir() {
	local host=${1%%:*} path=${1#*:}
	ks:sshrun "$host" mkdir -p "$path"
}

r:rm_rvf() {
	local host=${1%%:*} path=${1#*:}
	ks:sshrun "$host" rm -rvf "$path"
}

declare -A fsbase urlbase

fsbase="virgule:nullroute/tmp"
urlbase="https://nullroute.eu.org/tmp"

fsbase[fs1]="ukradius:pub/fs1/tmp"
urlbase[fs1]="http://fs1.nullroute.eu.org/tmp"

fsbase[fs2]="ns228507:pub/fs2/tmp"
urlbase[fs2]="http://fs2.nullroute.eu.org/tmp"

# parse command line

arg_mangle=
arg_server=
arg_subdir=
arg_yearly=1
arg_clobber=0
arg_remove=0

while getopts ":01cDd:s:X" OPT; do
	case $OPT in
	0) arg_yearly=0;;
	1) arg_server=fs1;;
	c) arg_clobber=1;;
	d) arg_subdir=$OPTARG;;
	s) arg_mangle=$OPTARG;;
	X) arg_remove=1;;
	*) die_getopts;;
	esac
done; shift $((OPTIND-1))

if [[ $arg_server ]]; then
	fsbase=${fsbase[$arg_server]}
	urlbase=${urlbase[$arg_server]}
	if [[ $fsbase && $urlbase ]]; then
		trace "uploading to '$fsbase'"
	else
		die "unknown server '$arg_server'"
	fi
fi

if (( arg_yearly )); then
	year=$(date +%Y)
	fsbase+="/$year"
	urlbase+="/$year"
fi

if [[ $arg_subdir ]]; then
	fsbase+="/$arg_subdir"
	urlbase+="/$arg_subdir"
fi

debug "base dir: '$fsbase'"
debug "base url: '$urlbase'"

# prepare upload target

if [[ $arg_server || $arg_subdir ]]; then
	# $arg_server is a hack, until I copy rotate-up.sh to all other servers
	r:mkdir "$fsbase"
fi

# upload files

clip=()

if (( !$# )); then
	die "missing file names"
fi

for arg; do
	if (( ! arg_remove )); then
		if [[ ! -f $arg ]]; then
			err "'$arg' is not a file"
			continue
		elif [[ ! -s $arg ]]; then
			warn "'$arg' is empty, skipping"
			continue
		fi
	fi

	name=${arg##*/}
	# yay special case
	if [[ $name == Screencast?from* ]]; then
		name=$(echo "$name" | sed -r "s/^Screencast from //; s/ /./g; s/://g")
	fi
	if [[ $arg_mangle ]]; then
		name=$(echo "$name" | sed -r "$arg_mangle")
	fi
	source=$(readlink -f "$arg")
	target="$fsbase/$name"
	debug "* source: '$source'"
	debug "  target: '$target'"

	if (( arg_remove )); then
		r:rm_rvf "$target"
	else
		if (( arg_clobber )) || ! r:test -s "$target"; then
			rsync -Ps "$source" "$target"
		else
			notice "'$name' already exists on server"
		fi

		echo "$name → $urlbase/$name"
		clip+=("$urlbase/$name")
	fi
done

if [[ "$DISPLAY" ]] && (( ${#clip[@]} )); then
	echo -n "${clip[*]}" | xsel -i -b
fi

(( !errors ))
