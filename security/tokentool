#!/usr/bin/env python3
from binascii import hexlify
from nullroute.core import Core
import nullroute.ui
import os
from pprint import pprint
import sys
import subprocess
import urllib.parse

def decode_uri_attr(key, value):
    if key in {"id"}:
        return urllib.parse.unquote_to_bytes(value)
    else:
        return urllib.parse.unquote(value)

def encode_uri_attr(key, value):
    return urllib.parse.quote(value)

def parse_uri(uri):
    (scheme, data) = uri.split(":", 1)
    if scheme != "pkcs11":
        raise ValueError("uri scheme not acceptable: %r" % uri)
    data = data.split(";")
    data = {k: decode_uri_attr(k, v)
            for k, v in [i.split("=", 1) for i in data]}
    return data

def make_uri(data):
    data = ["%s=%s" % (k, encode_uri_attr(k, v))
            for k, v in data.items()]
    return "pkcs11:%s" % ";".join(data)

def parse_flags(value):
    return {f[4:] for f in value.strip("; ").split("; ")}

def enum_tokens():
    r = subprocess.run(["p11tool", "--list-token-urls"],
                       stdout=subprocess.PIPE)
    for uri in r.stdout.decode().splitlines():
        yield Token(uri)

class Token(object):
    @classmethod

    def __init__(self, uri):
        self.uri = uri
        self.info = parse_uri(uri)
        self.pin = None
        self._objects = None

    def get_pin(self):
        self.pin = os.environ["p"]

    def _run_p11tool(self, args):
        self.get_pin()
        r = subprocess.run(["p11tool",
                            "--set-pin=%s" % self.pin,
                            "--login",
                            *args],
                           stdout=subprocess.PIPE)
        return r

    def enum_objects(self):
        """
        r = self._run_p11tool(["--only-urls",
                               "--list-all",
                               self.uri])
        for line in r.stdout.decode().splitlines():
            yield TokenObject(line, token=self)
        """
        r = self._run_p11tool(["--list-all", self.uri])
        obj = None
        for line in r.stdout.decode().splitlines():
            line = line.rstrip()
            if line.startswith("Object "):
                obj = {}
            elif not line:
                yield TokenObject(obj["URL"], obj, self)
            else:
                k, v = line.strip().split(": ", 1)
                obj[k] = v

    def enum_objects_cached(self, refresh=False):
        if refresh or not self._objects:
            self._objects = [*self.enum_objects()]
        return self._objects

    def delete_object_uri(self, uri):
        r = subprocess.run(["args", "p11tool",
                            "--set-pin=%s" % self.pin,
                            "--login",
                            "--delete",
                            uri + "derp"])

class TokenObject(object):
    def __init__(self, uri, data, token):
        self.uri = uri
        self.info = parse_uri(uri)
        self.flags = parse_flags(data["Flags"])
        self.token = token

    def __repr__(self):
        return "<TokenObject(%r, %r)>" % (self.uri, self.flags)

    @property
    def type_str(self):
        return self.info["type"]

    @property
    def name(self):
        return self.info["object"]

    @property
    def id_str(self):
        return hexlify(self.info["id"]).decode()

    def delete(self):
        return self.token.delete_object_uri(self.uri)

def print_objects(token, only=None):
    tab = nullroute.ui.Table()
    tab.add_column("#")
    tab.add_column("TYPE")
    tab.add_column("ID")
    tab.add_column("OBJECT")
    tab.add_column("FLAGS")
    for i, obj in enumerate(token.enum_objects_cached()):
        if only and obj not in only:
            continue
        tab.add_row([
            str(i),
            obj.type_str,
            obj.id_str,
            obj.name,
            ",".join(sorted(obj.flags)),
        ])
    tab.print()

def print_one_object(obj):
    print_objects(obj.token, only={obj})

for token in enum_tokens():
    if token.info["serial"] == "ed1fcede36ba4d69":
        print_objects(token)
        while True:
            cmd = nullroute.ui.prompt("\033[1mtoken>\033[m ")
            if cmd is None:
                break
            cmd, *rest = cmd.split()
            if cmd in {"ls", "p"}:
                print_objects(token)
            elif cmd in {"del", "d"}:
                try:
                    pos = int(rest[0])
                    obj = token.enum_objects_cached()[pos]
                    print_one_object(obj)
                except IndexError:
                    Core.err("no such object %r", rest[0])
                if nullroute.ui.confirm("\033[1;31mDelete?\033[m "):
                    obj.delete()
                    token.enum_objects_cached(refresh=True)
