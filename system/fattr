#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:std :utf8);
use Getopt::Long qw(:config bundling no_ignore_case);
use MIME::Base64;
use Nullroute::Lib;

# https://freedesktop.org/wiki/CommonExtendedAttributes/

my %ALIAS_ATTRS = (
	author	 	=> "user.dublincore.creator",
	comment  	=> "user.xdg.comment",
	date	 	=> "user.dublincore.date",
	desc		=> "user.dublincore.description",
	description	=> "user.dublincore.description",
	lang     	=> "user.xdg.language",
	origin   	=> "user.xdg.origin.url",
	mime  		=> "user.mime_type",
	mimetype	=> "user.mime_type",
	publisher	=> "user.dublincore.publisher",
	subject		=> "user.dublincore.subject",
	referer  	=> "user.xdg.referrer.url",
	title	 	=> "user.dublincore.title",
);

my %HIDE_ATTRS = (
	"user.com.dropbox.attributes" => 1,
);

my %Opt = (
	all => 0,
);

sub _system {
	my (@args) = @_;
	_debug("running: @args");
	system {$args[0]} @args;
}

sub escape_c {
	my ($str) = @_;
	$str =~ s/[\\"]/\\$&/g;
	$str =~ s/\n/\\n/g;
	$str =~ s/\t/\\t/g;
	$str =~ s/[\x00-\x1F]/sprintf("\\x%02X", ord($&))/ge;
	return $str;
}

sub safe_val {
	my ($str) = @_;
	if (utf8::is_utf8($str) || utf8::decode($str)) {
		return "\"".escape_c($str)."\"";
	} else {
		return "{".encode_base64($str, "")."}";
	}
}

sub set_attrs {
	my ($key, $val, @files) = @_;
	my $ret = _system("setfattr", "-n", $key, "-v", $val, "--", @files);
	return ($ret > 0);
}

sub unset_attrs {
	my ($key, @files) = @_;
	my $ret = _system("setfattr", "-x", $key, "--", @files);
	return ($ret > 0);
}

sub dump_attrs {
	my (@files) = @_;
	my $ret = 0;
	if (eval {require Linux::UserXAttr}) {
		for my $file (@files) {
			my (@keys, $key, $val);

			@keys = Linux::UserXAttr::listxattr($file);
			if ($!) {
				_err("cannot read attrs of '$file': $!");
				++$ret; next;
			}
			unless ($Opt{all}) {
				@keys = grep {/^user\./} @keys;
				@keys = grep {!$HIDE_ATTRS{$_}} @keys;
				next if !@keys;
			}

			print "\e[1m".$file."\e[m\n";
			if (!@keys) {
				print "  \e[2m-- no attributes --\e[m\n";
			}
			for $key (sort @keys) {
				$val = Linux::UserXAttr::getxattr($file, $key);
				if ($!) {
					_err("cannot read attr '$key' of '$file': $!");
					++$ret; next;
				}
				$key =~ s/^user\.// unless $Opt{all};
				print "  ".$key." = ".safe_val($val)."\n";
			}
			print "\n";
		}
	} else {
		_notice("Linux::UserXAttr missing; falling back to getfattr");
		$ret = _system("getfattr",
				"--absolute-names",
				"-m", $Opt{all} ? "-" : "^user\\.",
				"-d",
				@files);
	}
	return ($ret > 0);
}

sub usage {
	print "$_\n" for
	"Usage: $::arg0 [-a] PATH... [KEY=VALUE...]",
	"",                           #
	"  -a, --all                  include non-user namespaces",
	"  PATH                       file names to examine/modify",
	"  KEY=VALUE                  extended attributes to set",
	"                             (empty value will remove attribute)",
}

utf8::decode($_) for @ARGV;

GetOptions(
	"help" => sub { usage(); exit; },
	"a|all" => \$Opt{all},
) or exit(2);

my %attrs;
my @files;

my $attr_re = qr|[^/?=]+|;

for (@ARGV) {
	if (-e $_ || -l $_) {
		push @files, $_;
	}
	elsif (/^($attr_re)=(.*)$/) {
		my ($key, $val) = ($1, $2);
		if ($ALIAS_ATTRS{$key}) {
			$key = $ALIAS_ATTRS{$key};
		} elsif ($key =~ /^\./) {
			$key =~ s///;
		} elsif ($key !~ /^(user|system|security|trusted)\./) {
			$key = "user.".$key;
		}
		$attrs{$key} = $val;
	}
	else {
		push @files, $_;
	}
}

if (!@files) {
	_die("no files specified");
}

my $exit = 0;

if (%attrs) {
	for my $key (keys %attrs) {
		my $val = $attrs{$key};
		if (length $val) {
			_debug("setting '$key' to '$val'");
			$exit |= set_attrs($key, $val, @files);
		} else {
			_debug("removing '$key'");
			$exit |= unset_attrs($key, @files);
		}
	}
} else {
	$exit |= dump_attrs(@files);
}

exit $exit;
