#!/usr/bin/env perl
use v5.14;
use Data::Dumper;
use Net::DNS;

my %AS = ();

my %COMMUNITY = (
	64511 => {
		1 => "latency[0–2.7]",
		2 => "latency[2.7–7.3]",
		3 => "latency[7.3–20]",
		21 => "bw[0.1–1Mb]",
		31 => "enc[none]",
		32 => "enc[unsafe]",
		33 => "enc[nonPFS]",
		34 => "enc[PFS]",
		# https://lists.nox.tf/pipermail/dn42/2015-December/001259.html
		41 => "region[EU]",
		42 => "region[NAm-E]",
		43 => "region[NAm-C]",
		44 => "region[NAm-W]",
		45 => "region[CAm]",
		46 => "region[SAm-E]",
		47 => "region[SAm-W]",
		48 => "region[Af-N]",
		49 => "region[Af-S]",
		50 => "region[As-S]",
		51 => "region[As-SE]",
		52 => "region[As-E]",
		53 => "region[Pa]",
		_ => sub {
			my $n = shift;
			if (4 <= $n && $n <= 9) {
				sprintf("latency[%d–%d]", exp($n-1), exp($n));
			} elsif (20 <= $n && $n <= 29) {
				sprintf("bw[%d–%dMb]", 10**($n-22), 10**($n-21));
			} else {
				$n;
			}
		},
	},
	4242423827 => {
		1090 => "via-iBGP",
		1100 => "via-eBGP",
	},
);

sub _asname {
	state $res = Net::DNS::Resolver->new;
	my ($as) = @_;
	if (!$AS{$as}) {
		my $ans = $res->query("AS$as.asn.dn42", "TXT");
		if ($ans && $ans->{answer}) {
			my $str = $ans->{answer}->[0]->{txtdata}->[0]->[0];
			my @str = split(/ \| /, $str, 5);
			@str = grep {!/^AS\d+$/} split(/\s+/, $str[4]);
			$as = $str[0]." (".$as.")";
		}
	}
	return $AS{$as} //= $as;
}

sub asname {
	my ($as, $fmt) = @_;
	$fmt //= "%s";
	if ($AS{$as}) {
		return $AS{$as}." ($as)";
	}
	return $as;
}

sub tagname {
	my ($tag) = @_;
	$tag =~ s/^RT://;
	if ($tag =~ /^(\d+):(\d+)$/) {
		my $as = int $1;
		my $cm = int $2;
		my $name;
		if ($COMMUNITY{$as}{$cm}){ $name = $COMMUNITY{$as}{$cm}; }
		elsif ($COMMUNITY{$as}{_}) { $name = $COMMUNITY{$as}{_}->($cm); }
		if ($AS{$as} || $name) {
			return "<".($AS{$as} // $as).":".($name || $cm).">";
		}
	}
	return $tag;
}

sub filter {
	while (<STDIN>) {
		if (/^  ([0-9 ]+)$/) {
			my @aspath = split(/ /, $1);
			@aspath = map {asname($_)} @aspath;
			@aspath = map {"\e[1m$_\e[m"} @aspath;
			print " ".join(" \e[1;33m›\e[m ", "", @aspath, "")."\n";
		}
		elsif (/^(      Community:) (.+)$/) {
			my ($prefix, $tags) = ($1, $2);
			my @tags = split(/ /, $tags);
			@tags = map {tagname($_)} @tags;
			print $prefix." ".join(", ", @tags)."\n";
		}
		elsif (/^(      Extended Community:) (.+)$/) {
			my ($prefix, $tags) = ($1, $2);
			my @tags = split(/ /, $tags);
			@tags = map {tagname($_)} @tags;
			print $prefix." ".join(", ", @tags)."\n";
		}
		elsif (/^      Last update:/) {
			next;
		}
		elsif (/^      Origin/) {
			s/\bbest\b/\e[1;32m$&\e[m/;
			s/\binternal\b/\e[1;35m$&\e[m/;
			s/\bexternal\b/\e[1;36m$&\e[m/;
			print;
		}
		else {
			print;
		}
	}
}

my $dir = $ENV{XDG_CONFIG_HOME} // $ENV{HOME}."/.config";
my $path_asnames = "$dir/nullroute.eu.org/dn42-asnames.txt";

if (open(my $f, "<", $path_asnames)) {
	while (<$f>) {
		if (/^(\d+)\s+(.+)$/) {
			$AS{int $1} = $2;
		}
	}
	close($f);
}

filter
