#!/usr/bin/env python3
# encoding: utf-8
import json
import os
import sys
import subprocess
from argparse import ArgumentParser
from nullroute.core import Core, Env
from nullroute.misc import fmt_size_short

level_colors = {
    "red":      (196,  9),
    "yellow":   (226, 11),
    "green":    ( 76, 10),
    "gray":     (240,  7),
}

levels_small = [
    ( 10, "green"),
    (  5, "yellow"),
    (  0, "red"),
    ( -1, "gray"),
]

levels_big = [
    ( 10, "green"),
    (  2, "yellow"),
    (  0, "red"),
    ( -1, "gray"),
]

KIND_NONE   = 0
KIND_ROOT   = 1
KIND_HOME   = 2
KIND_MEDIA  = 3
KIND_MEMORY = 4
KIND_NET    = 5
KIND_SYSTEM = 6
KIND_KERNEL = 7

fs_kind_names = {
    KIND_HOME:      "home",
    KIND_MEDIA:     "media",
    KIND_NONE:      "-",
    KIND_ROOT:      "root",
    KIND_SYSTEM:    "system",
    KIND_NET:       "net",
    KIND_MEMORY:    "memory",
    KIND_KERNEL:    "kernel",
}

fs_kind_priorities = {
    KIND_HOME:      100,
    KIND_MEDIA:     50,
    KIND_NONE:      1,
    KIND_ROOT:      0,
    KIND_SYSTEM:    -1,
    KIND_NET:       -10,
    KIND_MEMORY:    -100,
    KIND_KERNEL:    -1000,
}

fs_kind_groups = {
    KIND_HOME:      1,
    KIND_MEDIA:     4,
    KIND_NONE:      1,
    KIND_ROOT:      1,
    KIND_NET:       5,
    KIND_MEMORY:    2,
    KIND_KERNEL:    3,
}

fs_kind_prefixes = [
    ("/boot/",      KIND_SYSTEM),
    ("/dev/",       KIND_KERNEL),
    ("/efi/",       KIND_SYSTEM),
    ("/media/",     KIND_MEDIA),
    ("/n/",         KIND_NET),
    ("/proc/",      KIND_KERNEL),
    ("/run/media/", KIND_MEDIA),
    ("/run/user/",  KIND_MEMORY),
    ("/sys/",       KIND_KERNEL),
    ("/tmp/",       KIND_MEMORY),
    ("/home",       KIND_HOME),
    ("/",           KIND_ROOT),
]

fs_kind_fstypes = {
    "afs":          KIND_NET,
    "fuse.sshfs":   KIND_NET,
    "cgroup":       KIND_KERNEL,
    "devpts":       KIND_KERNEL,
    "devtmpfs":     KIND_KERNEL,
    "ecryptfs":     KIND_KERNEL,
    "efivarfs":     KIND_KERNEL,
    "rootfs":       KIND_KERNEL,
    "tmpfs":        KIND_MEMORY,
}

fs_noskip_mounts = {
    "/run/user/%d" % os.getuid(),
    "/tmp",
}

fs_skip_kinds = { KIND_KERNEL }

fs_verbose_kinds = { KIND_SYSTEM, KIND_MEMORY }

fs_cache_kinds = { KIND_MEDIA }

fs_skip_mounts = {
    #"/boot",
    #"/efi",
}

class PersistentDict(dict):
    def __init__(self, path):
        self.path = path
        self.load()

    def load(self):
        try:
            with open(self.path, "r") as fh:
                data = json.load(fh)
            self.update(data)
        except FileNotFoundError as e:
            Core.debug("cache load failed (%r)" % e)

    def flush(self):
        try:
            with open(self.path, "w") as fh:
                json.dump(self, fh)
        except Exception as e:
            Core.debug("cache save failed (%r)" % e)

def get_user_name():
    return os.environ.get("LOGNAME", "root")

def get_home_dir():
    return os.path.expanduser("~")

def get_media_dir():
    return "/run/media/%s" % get_user_name()

def _get_cmd_output(*argv):
    proc = subprocess.Popen(argv, stdout=subprocess.PIPE)
    return proc.stdout.read().strip().decode("utf-8")

def get_dir_fsid(path):
    return _get_cmd_output("stat", "-f", "-c", "%i", path)

def get_fs_devno(mtpt):
    return _get_cmd_output("mountpoint", "-d", mtpt)

def fs_kind_from_path(path, fstype):
    if not path.endswith("/"):
        path += "/"
    if path == "/":
        home = get_home_dir()
        path_fsid = get_dir_fsid(path)
        home_fsid = get_dir_fsid(home)
        Core.debug("comparing fsid of %r vs %r", path, home)
        if (path_fsid == home_fsid) and (path_fsid != "0"):
            return KIND_HOME
        else:
            return KIND_ROOT

    fallback = KIND_NONE
    for prefix, kind in fs_kind_prefixes:
        if prefix == "/":
            fallback = kind
        elif prefix.endswith("/"):
            if path.startswith(prefix):
                return kind
        else:
            if path == prefix + "/":
                return kind
        # XXX: use a separate flag

    if fstype in fs_kind_fstypes:
        return fs_kind_fstypes[fstype]

    return fallback

def path_shorten(path):
    path = path.rstrip("/") + "/"
    home = get_home_dir().rstrip("/") + "/"
    media = get_media_dir().rstrip("/") + "/"
    if path == home:
        return "~"
    elif path == "/":
        return "/ (rootfs)"
    elif path.startswith(home):
        return "~/" + path[len(home):-1]
    elif path.startswith(media):
        return path[len(media):-1]
    else:
        return path[:-1]

def fmt_percent(n, digits):
    if round(n, digits) < 100:
        return "%*.*f%%" % (digits+2, digits, n)
    else:
        return "%*.*f%%" % (digits+1, digits-1, n)

def fmt_ansi(text, fmt):
    return "\033[%sm%s\033[m" % (fmt, text) if fmt else text

def gauge3(width, level,
           full_char="█", partial_char="▌", empty_char=" ",
           full_fmt="", partial_fmt="", empty_fmt=""):

    cells = width * level / 100
    n_full = int(cells)
    n_partial = int(round(cells % 1))
    n_empty = int(width - n_full - n_partial)

    return fmt_ansi(full_char    * n_full,    full_fmt) \
         + fmt_ansi(partial_char * n_partial, partial_fmt) \
         + fmt_ansi(empty_char   * n_empty,   empty_fmt)

def rgb_split(color):
    r = (color - 16) // 6 // 6 % 6
    g = (color - 16) // 6 % 6
    b = (color - 16) % 6
    return (r, g, b)

def rgb_merge(r, g, b):
    return (r * 6 * 6) + (g * 6) + b + 16

def darken(color, n):
    if 0 <= color <= 7:
        return color
    elif 8 <= color <= 15:
        return color - 8 if n > 0 else color
    elif 16 <= color <= 232:
        r, g, b = rgb_split(color)
        r = max(r - n, 0)
        g = max(g - n, 0)
        b = max(b - n, 0)
        return rgb_merge(r, g, b)
    elif 232 <= color <= 255:
        return max(color - 3*n, 232)

def gauge3x(width, level, color, bars=None):
    bright = color
    dark = darken(color, 1)

    if not bars:
        if os.getenv("TERM") == "linux":
            bars = "##-"
        else:
            bars = u"\u275a", u"\u275a", u"\u2758"
    elif len(bars) != 3:
        bars = bars[0] * 3

    return gauge3(width, level, *bars,
                    full_fmt="38;5;%d" % bright,
                    partial_fmt="2;38;5;%d" % dark,
                    empty_fmt="38;5;238")

def threshold(total, val):
    if total > 100e9:
        levels = levels_big
    else:
        levels = levels_small

    Core.debug("looking for value %r" % val)
    for tmin, tval in levels:
        if val >= tmin:
            Core.debug(" - match: input %r >= row %r; returning %r" % (val, tmin, tval))
            return tval
        else:
            Core.debug(" - no match: input %r < row %r; value %r" % (val, tmin, tval))
    Core.debug("returning last value %r" % tval)
    return tval

def unescape_mtab(val):
    out = ""
    state = 0
    num = 0
    acc = 0
    for char in val:
        if state == 0:
            if char == "\\":
                num = 0
                acc = 0
                state = 1
            else:
                out += char
        elif state == 1:
            num += 1
            acc = (acc << 3) | int(char)
            if num == 3:
                out += chr(acc)
                state = 0
    return out

def enum_mtab():
    skip_fstypes = {
        "afs", "cgroup", "devpts", "devtmpfs", "ecryptfs", "efivarfs", "rootfs", "tmpfs",
    }
    with open("/etc/mtab") as fh:
        for line in fh:
            dev, mtpt, fstype, rest = line.strip().split(None, 3)
            mtpt = unescape_mtab(mtpt)
            kind = fs_kind_from_path(mtpt, fstype)
            if mtpt in fs_skip_mounts:
                Core.debug("skipping mount %r (fs_skip_mounts)" % mtpt)
                continue
            if kind in fs_skip_kinds and mtpt not in fs_noskip_mounts:
                Core.debug("skipping mount %r (fs_skip_kinds[%r])" % (mtpt, kind))
                continue
            if fstype in skip_fstypes and mtpt not in fs_noskip_mounts:
                Core.debug("skipping mount %r (fs_skip_fstypes[%r])" % (mtpt, fstype))
                continue
            Core.debug("adding mount %r (kind %r, fstype %r)" % (mtpt, kind, fstype))
            yield mtpt, fstype, kind

def enum_cached():
    global cache
    for key in sorted(cache.keys()):
        yield (key, cache[key])

def cache_add(key, data):
    global cache
    cache[key] = data

ap = ArgumentParser()
ap.add_argument("-a", "--all", action="store_true",
                help="show unimportant filesystems")
ap.add_argument("-c", "--cached", action="store_true",
                help="include nonpresent cached filesystems")
ap.add_argument("--si", action="store_true",
                help="use SI decimal units, not IEC binary units")
ap.add_argument("path", nargs="*")
opts = ap.parse_args()

if not opts.all:
    fs_noskip_mounts.clear()
    fs_skip_kinds |= fs_verbose_kinds

cache = PersistentDict(Env.find_cache_file("diskuse.json"))

partitions = [(x, None, KIND_NONE) for x in opts.path]
if not partitions:
    partitions = list(enum_mtab())
    if opts.cached:
        partitions += [(k, None, v["kind"]) for k, v in cache.items()]
partitions.sort(key=lambda x: x[0])
partitions.sort(key=lambda x: fs_kind_priorities[x[2]], reverse=True)

quota = False

seen_devnos = set()

if quota:
    quota_gauge_width = 20
    disk_gauge_width = 10
    fmt = " %-16s %7s %7s %7s %-*s %5s %-*s %3s"
    header = (
        "PATH",
        "TOTAL",
        "FREE",
        "AVAIL",
        quota_gauge_width, "QUOTA USAGE",
        "",
        disk_gauge_width, "DISK USAGE",
        "",
    )
else:
    disk_gauge_width = 30
    fmt = " %-20s %7s %7s %7s %-*s %5s"
    header = (
        "PATH",
        "TOTAL",
        "USED",
        "FREE",
        disk_gauge_width, "",
        "",
    )

separator = fmt_ansi("-" * len(fmt % header), "2")

def dump_mtpt(mtpt, fstype, kind, from_cache=False, want_separator=False):
    global cache

    if fstype is None:
        from_cache = True

    if from_cache:
        data = cache[mtpt]
        Core.debug("processing %r from cache" % mtpt)

        fstype          = data["fs"]
        total_bytes     = data["total"]
        free_bytes      = data["free"]
        avail_bytes     = data["avail"]

    else:
        try:
            st = os.statvfs(mtpt)
        except (PermissionError, OSError) as e:
            Core.debug("skipping %r: could not statvfs: %r" % (mtpt, e))
            return False

        if st.f_blocks == 0:
            Core.debug("skipping %r: f_blocks == 0" % mtpt)
            return False

        devno = get_fs_devno(mtpt)
        if devno in seen_devnos:
            Core.debug("skipping %r: devno %r already seen" % (mtpt, devno))
            return False

        seen_devnos.add(devno)
        Core.debug("processing %r" % mtpt)

        total_bytes     = st.f_bsize * st.f_blocks
        free_bytes      = st.f_bsize * st.f_bfree
        avail_bytes     = st.f_bsize * st.f_bavail

        if kind in fs_cache_kinds:
            cache_add(mtpt, {
                            "fs": fstype,
                            "kind": kind,
                            "total": total_bytes,
                            "free": free_bytes,
                            "avail": avail_bytes,
                        })

    used_bytes      = total_bytes - free_bytes
    quota_bytes     = used_bytes + avail_bytes

    quota_part      = used_bytes / quota_bytes * 100
    disk_part       = used_bytes / total_bytes * 100

    if from_cache:
        disk_color      = "gray"
        quota_color     = "gray"
    else:
        disk_color      = threshold(total_bytes, -1)
        quota_color     = threshold(quota_bytes, 100 - quota_part)

    Core.debug(" - total bytes=%r, used=%.2f%%, free=%.2f%%, color=%r" % (total_bytes, disk_part, 100-disk_part, disk_color))
    Core.debug(" - quota bytes=%r, used=%.2f%%, free=%.2f%%, color=%r" % (quota_bytes, quota_part, 100-quota_part, quota_color))

    disk_color      = level_colors[disk_color][0]
    quota_color     = level_colors[quota_color][0]

    if quota:
        row = (
            path_shorten(mtpt),

            fmt_size_short(total_bytes, si=opts.si),
            fmt_size_short(free_bytes, si=opts.si),
            fmt_size_short(avail_bytes, si=opts.si),

            quota_gauge_width,
            gauge3x(quota_gauge_width, quota_part, quota_color),
            fmt_percent(quota_part, 1),

            disk_gauge_width,
            gauge3x(disk_gauge_width, disk_part, darken(disk_color, 2)),
            fmt_percent(disk_part, 0),
        )
    else:
        row = (
            path_shorten(mtpt),

            fmt_size_short(total_bytes, si=opts.si),
            fmt_size_short(used_bytes, si=opts.si),
            fmt_size_short(free_bytes, si=opts.si),

            disk_gauge_width,
            gauge3x(disk_gauge_width, quota_part, quota_color),
            fmt_percent(disk_part, 1),
        )

    if want_separator:
        print(separator)
    print(fmt % row)
    return True

def dump_all():
    print(fmt_ansi(fmt, "1") % header)
    thisgroup = 0
    for mtpt, fstype, kind in partitions:
        Core.debug("got mtpt %r of kind %r (%s) prio %r",
                   mtpt, kind, fs_kind_names.get(kind),
                   fs_kind_priorities.get(kind, 0))
        group = fs_kind_groups.get(kind)
        if dump_mtpt(mtpt, fstype, kind,
                     want_separator=(thisgroup and group != thisgroup)):
            thisgroup = group
    Core.debug("finished")

dump_all()

cache.flush()
