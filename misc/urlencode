#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Std;

my %opts;

sub usage {
	print STDERR for
	"Usage: urlencode [-AdprxX] [string]\n",
	"\n",
	"    -A    encode for mq\n",
	"    -d    decode\n",
	"    -D    decode + as space\n",
	"    -o    oct-encode (\\123)\n",
	"    -p    encode full path (allowing slashes)\n",
	"    -q    encode quoted-printable\n",
	"    -P    do not encode parentheses\n",
	"    -r    do not print newline\n",
	"    -x    hex-encode (\\xAB)\n",
	"    -X    XML-escape\n";
	exit;
}

sub decode {
	if ($opts{A}) { s/^:// }
	s/%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
	if ($opts{D}) { s/\+/ /g; }
}

sub encode {
	if ($opts{A}) {
		s/[\x00-\x1F %]/sprintf("%%%02X", ord($&))/seg;
		s/^$|^:/:$&/;
	} elsif ($opts{x}) {
		s/[^A-Za-z0-9_. \/-]/sprintf("\\x%02X", ord($&))/seg;
	} elsif ($opts{o}) {
		s/[^A-Za-z0-9_. \/-]/sprintf("\\%03o", ord($&))/seg;
	} elsif ($opts{p}) {
		s/[^\/A-Za-z0-9_.!~*'-]/sprintf("%%%02X", ord($&))/seg;
	} elsif ($opts{"q"}) {
		s/[^\x21-\x3C\x3E-\x7E]/sprintf("=%02X", ord($&))/seg;
	} elsif ($opts{"X"}) {
		s/&/&amp;/g;
		s/</&lt;/g;
		s/>/&gt;/g;
		s/"/&quot;/g;
	} else {
		s/[^A-Za-z0-9_.!~*'()-]/sprintf("%%%02X", ord($&))/seg;
		if (!$opts{"P"}) {
			s/[()]/sprintf("%%%02X", ord($&))/seg;
		}
	}
}

sub do_things {
	if ($opts{d} || $opts{D}) {
		decode;
	} else {
		encode;
	}
	print;
	print "\n" unless $opts{r};
}

getopts('AdDopPqrxX', \%opts) || usage;

if (scalar @ARGV) {
	do_things for @ARGV;
} else {
	while (<STDIN>) {
		chomp unless $opts{r};
		do_things;
	}
}
