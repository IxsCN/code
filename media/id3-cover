#!/usr/bin/env python
from __future__ import print_function
import sys, os
import getopt
from mutagen import mp3, id3
from nullroute.core import *

def trace(msg):
    global verbose
    if verbose:
        print(msg, file=sys.stderr)

def usage():
    print("Usage:")
    print("    import: cover -i [-f image_file] audio_file [audio_file ...]")
    print("    export: cover -e [-f image_file] audio_file")
    print("    remove: cover -x audio_file [audio_file ...]")

def fileext_to_type(ext):
    return {
        "jpeg": "image/jpeg",
        "jpg":  "image/jpeg",
        "png":  "image/png",
    }[ext[1:]]

def type_to_fileext(type):
    return {
        "image/jpeg":   ".jpeg",
        "image/png":    ".png",
    }[type]

def export_cover(file, cover_file):
    try:
        filetag = mp3.MP3(file)
    except BaseException as e:
        Core.err(e)
        return False

    if "APIC:" not in filetag:
        Core.err("no cover image (APIC frame not found)")
        return False

    with open(cover_file or "/dev/stdout", "wb") as cover_fh:
        trace("exporting image: %s" % cover_file)
        cover_fh.write(filetag["APIC:"].data)
    return True

def import_cover(file, image_data, image_type="image/jpeg"):
    try:
        filetag = mp3.MP3(file)
    except BaseException as e:
        Core.err(e)
        return False

    trace("using content type %r" % image_type)

    filetag.tags.add(id3.APIC(
        data=image_data,
        mime=image_type,
        type=id3.PictureType.COVER_FRONT,
        desc=u"",
        encoding=id3.Encoding.UTF8))

    trace("updating tags: %s" % file)
    try:
        filetag.save()
    except BaseException as e:
        Core.err(e)
        return False
    else:
        return True

def remove_cover(file):
    try:
        filetag = mp3.MP3(file)
    except BaseException as e:
        Core.err(e)
        return False

    if "APIC:" in filetag:
        del filetag["APIC:"]

    trace("updating tags: %s" % file)
    try:
        filetag.save()
    except BaseException as e:
        Core.err(e)
        return False
    else:
        return True

try:
    options, files = getopt.gnu_getopt(sys.argv[1:], "ef:iovx")
except getopt.GetoptError as e:
    Core.err(str(e))
    usage()
    sys.exit(2)

mode = None
cover_file = None
verbose = os.getenv("DEBUG")

for opt, value in options:
    if   opt == "-e": mode = "export"
    elif opt == "-f": cover_file = value
    elif opt == "-i": mode = "import"
    elif opt == "-o": mode = "export"
    elif opt == "-v": verbose = True
    elif opt == "-x": mode = "kill"

if not mode:
    Core.die("mode not specified")

if len(files) < 1:
    Core.die("no .mp3 files specified")

if mode == "import":
    if cover_file:
        cover_fh = open(cover_file, 'rb')
        _, ext = os.path.splitext(cover_file)
        image_type = fileext_to_type(ext)
    else:
        cover_fh = sys.stdin
        image_type = None #"image/jpeg"
    image_data = cover_fh.read()
    for audiofile in files:
        import_cover(audiofile, image_data, image_type)

elif mode == "export":
    if len(files) > 1:
        Core.die("cannot export multiple covers to one file")

    ret = export_cover(files[0], cover_file)

    sys.exit(0 if ret else 1)

elif mode == "kill":
    ret = True

    for audiofile in files:
        ret = remove_cover(audiofile) and ret

    sys.exit(0 if ret else 1)

else:
    Core.die("BUG: bad mode %r" % mode)
