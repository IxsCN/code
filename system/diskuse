#!/usr/bin/env python
# encoding: utf-8
from __future__ import division, print_function
import os
import sys
import subprocess
from argparse import ArgumentParser
from nullroute.core import *

thresholds = [
    ( 10, ( 76, 10)),
    (  5, (226, 11)),
    (  0, (196,  9)),
    ( -1, (255,  7)),
]

KIND_NONE   = 0
KIND_ROOT   = 1
KIND_HOME   = 2
KIND_MEDIA  = 3
KIND_MEMORY = 4
KIND_NET    = 5
KIND_SYSTEM = 6
KIND_KERNEL = 7

fs_kind_names = {
    KIND_HOME:      "home",
    KIND_MEDIA:     "media",
    KIND_NONE:      "-",
    KIND_ROOT:      "root",
    KIND_SYSTEM:    "system",
    KIND_NET:       "net",
    KIND_MEMORY:    "memory",
    KIND_KERNEL:    "kernel",
}

fs_kind_priorities = {
    KIND_HOME:      100,
    KIND_MEDIA:     50,
    KIND_NONE:      1,
    KIND_ROOT:      0,
    KIND_SYSTEM:    -1,
    KIND_NET:       -10,
    KIND_MEMORY:    -100,
    KIND_KERNEL:    -1000,
}

fs_kind_groups = {
    KIND_HOME:      1,
    KIND_MEDIA:     1,
    KIND_NONE:      1,
    KIND_ROOT:      1,
    KIND_NET:       1,
    KIND_MEMORY:    2,
    KIND_KERNEL:    3,
}

fs_kind_prefixes = [
    ("/boot/",      KIND_SYSTEM),
    ("/dev/",       KIND_KERNEL),
    ("/media/",     KIND_MEDIA),
    ("/n/",         KIND_NET),
    ("/proc/",      KIND_KERNEL),
    ("/run/media/", KIND_MEDIA),
    ("/run/user/",  KIND_MEMORY),
    ("/sys/",       KIND_KERNEL),
    ("/tmp/",       KIND_MEMORY),
    ("/home/",      KIND_HOME),
    ("/",           KIND_ROOT),
]

fs_kind_fstypes = {
    "afs":          KIND_NET,
    "cgroup":       KIND_KERNEL,
    "devpts":       KIND_KERNEL,
    "devtmpfs":     KIND_KERNEL,
    "ecryptfs":     KIND_KERNEL,
    "efivarfs":     KIND_KERNEL,
    "rootfs":       KIND_KERNEL,
    "tmpfs":        KIND_MEMORY,
}

fs_noskip_mounts = {
    "/run/user/%d" % os.getuid(),
    "/tmp",
}

fs_skip_kinds = { KIND_KERNEL }

fs_verbose_kinds = { KIND_SYSTEM, KIND_MEMORY }

fs_skip_mounts = {
    "/boot",
}

def fs_kind_from_path(path):
    if not path.endswith("/"):
        path += "/"
    for prefix, kind in fs_kind_prefixes:
        if path.startswith(prefix):
            return kind
    return KIND_NONE

def path_shorten(path):
    path = path.rstrip("/")
    home = os.environ.get("HOME", "").rstrip("/")
    media = "/run/media/%s" % os.environ.get("LOGNAME", "root")
    if path == home:
        return "~"
    elif (path + "/").startswith(home + "/"):
        return "~" + path[len(home):]
    elif (path + "/").startswith(media + "/"):
        return "…" + path[len(media):]
    else:
        return path or "/"

def size_human(n, d=1, u=1024):
    cs = "BkMGTEP"
    e = 0
    while n >= u:
        n /= u
        e += 1
    c = cs[e]
    return "%.*f%s" % (d, n, c)

def percent(n, digits):
    if round(n, digits) < 100:
        return "%*.*f%%" % (digits+2, digits, n)
    else:
        return "%*.*f%%" % (digits+1, digits-1, n)

def ansify(text, fmt):
    return "\033[%sm%s\033[m" % (fmt, text) if fmt else text

def gauge3(width, level,
           full_char="█", partial_char="▌", empty_char=" ",
           full_fmt="", partial_fmt="", empty_fmt=""):

    cells = width * level / 100
    n_full = int(cells)
    n_partial = int(round(cells % 1))
    n_empty = int(width - n_full - n_partial)

    return ansify(full_char    * n_full,    full_fmt) \
         + ansify(partial_char * n_partial, partial_fmt) \
         + ansify(empty_char   * n_empty,   empty_fmt)

def rgb_split(color):
    r = (color - 16) // 6 // 6 % 6
    g = (color - 16) // 6 % 6
    b = (color - 16) % 6
    return (r, g, b)

def rgb_merge(r, g, b):
    return (r * 6 * 6) + (g * 6) + b + 16

def darken(color, n):
    if 0 <= color <= 7:
        return color
    elif 8 <= color <= 15:
        return color - 8 if n > 0 else color
    elif 16 <= color <= 232:
        r, g, b = rgb_split(color)
        r = max(r - n, 0)
        g = max(g - n, 0)
        b = max(b - n, 0)
        return rgb_merge(r, g, b)
    elif 232 <= color <= 255:
        return max(color - 3*n, 232)

def gauge3x(width, level, color, bars=None):
    bright = color
    dark = darken(color, 1)

    if not bars:
        if os.getenv("TERM") == "linux":
            bars = "#=-"
        else:
            bars = u"\u275a", u"\u275a", u"\u2758"
    elif len(bars) != 3:
        bars = bars[0] * 3

    return gauge3(width, level, *bars,
                    full_fmt="38;5;%d" % bright,
                    partial_fmt="2;38;5;%d" % dark,
                    empty_fmt="2;38;5;%d" % dark)

def threshold(level):
    for tmin, tval in thresholds:
        if level >= tmin:
            return tval
    return tval

def unescape_mtab(val):
    out = ""
    state = 0
    num = 0
    acc = 0
    for char in val:
        if state == 0:
            if char == "\\":
                num = 0
                acc = 0
                state = 1
            else:
                out += char
        elif state == 1:
            num += 1
            acc = (acc << 3) | int(char)
            if num == 3:
                out += chr(acc)
                state = 0
    return out

def enum_mtab():
    skip_fstypes = {
        "afs", "cgroup", "devpts", "devtmpfs", "ecryptfs", "efivarfs", "rootfs", "tmpfs",
    }
    with open("/etc/mtab") as fh:
        for line in fh:
            dev, mtpt, fstype, rest = line.strip().split(None, 3)
            mtpt = unescape_mtab(mtpt)
            kind = fs_kind_from_path(mtpt)
            if mtpt in fs_skip_mounts:
                Core.debug("skipping mount %r (fs_skip_mounts)" % mtpt)
                continue
            if kind in fs_skip_kinds and mtpt not in fs_noskip_mounts:
                Core.debug("skipping mount %r (fs_skip_kinds[%r])" % (mtpt, kind))
                continue
            if fstype in skip_fstypes and mtpt not in fs_noskip_mounts:
                Core.debug("skipping mount %r (fs_skip_fstypes[%r])" % (mtpt, fstype))
                continue
            Core.debug("adding mount %r (kind %r, fstype %r)" % (mtpt, kind, fstype))
            yield mtpt, fstype, kind

def get_fs_devno(mtpt):
    proc = subprocess.Popen(["mountpoint", "-d", mtpt],
                            stdout=subprocess.PIPE)
    return proc.stdout.read().strip().decode("utf-8")

ap = ArgumentParser()
ap.add_argument("-v", "--verbose",
                dest="verbose", action="store_true", default=False)
ap.add_argument("path",
                nargs="*")
opts = ap.parse_args()

if not opts.verbose:
    fs_noskip_mounts.clear()
    fs_skip_kinds |= fs_verbose_kinds

partitions = [(x, None, KIND_NONE) for x in opts.path]
if not partitions:
    partitions = list(enum_mtab())
partitions.sort(key=lambda x: x[0])
partitions.sort(key=lambda x: fs_kind_priorities[x[2]], reverse=True)

quota = False

seen_devnos = set()

if quota:
    quota_gauge_width = 20
    disk_gauge_width = 10
    fmt = " %-16s %7s %7s %7s %-*s %5s %-*s %3s"
    header = (
        "PATH",
        "TOTAL",
        "FREE",
        "AVAIL",
        quota_gauge_width, "QUOTA USAGE",
        "",
        disk_gauge_width, "DISK USAGE",
        "",
    )
else:
    disk_gauge_width = 30
    fmt = " %-20s %7s %7s %7s %-*s %5s"
    header = (
        "PATH",
        "TOTAL",
        "USED",
        "FREE",
        disk_gauge_width, "",
        "",
    )

def dump_mtpt(mtpt):
    try:
        st = os.statvfs(mtpt)
    except (PermissionError, OSError) as e:
        Core.debug("skipping %r: could not statvfs: %r" % (mtpt, e))
        return

    if st.f_blocks == 0:
        Core.debug("skipping %r: f_blocks == 0", mtpt)
        return

    devno = get_fs_devno(mtpt)
    if devno in seen_devnos:
        Core.debug("skipping %r: devno %r already seen" % (mtpt, devno))
        return

    seen_devnos.add(devno)
    Core.debug("processing %r" % mtpt)

    total_bytes     = st.f_bsize * st.f_blocks
    free_bytes      = st.f_bsize * st.f_bfree
    avail_bytes     = st.f_bsize * st.f_bavail

    used_bytes      = total_bytes - free_bytes
    quota_bytes     = used_bytes + avail_bytes

    quota_part      = used_bytes / quota_bytes * 100
    disk_part       = used_bytes / total_bytes * 100

    quota_color     = threshold(100 - quota_part)[0]
    disk_color      = threshold(-1)[0]

    if quota:
        row = (
            path_shorten(mtpt),

            size_human(total_bytes),
            size_human(free_bytes),
            size_human(avail_bytes),

            quota_gauge_width,
            gauge3x(quota_gauge_width, quota_part, quota_color),
            percent(quota_part, 1),

            disk_gauge_width,
            gauge3x(disk_gauge_width, disk_part, darken(disk_color, 2)),
            percent(disk_part, 0),
        )
    else:
        row = (
            path_shorten(mtpt),

            size_human(total_bytes),
            size_human(used_bytes),
            size_human(free_bytes),

            disk_gauge_width,
            gauge3x(disk_gauge_width, quota_part, quota_color),
            percent(disk_part, 1),
        )

    print(fmt % row)

def dump_all():
    separator = ansify("-" * len(fmt % header), "2")
    print(ansify(fmt, "1") % header)
    thisgroup = 0
    for mtpt, fstype, kind in partitions:
        Core.debug("got mtpt %r of kind %r (%s) prio %r" \
                   % (mtpt, kind, fs_kind_names.get(kind), fs_kind_priorities.get(kind, 0)))
        group = fs_kind_groups.get(kind)
        if thisgroup and group != thisgroup:
            Core.debug("group different from last (%r != %r), adding separator" \
                       % (group, thisgroup))
            print(separator)
        dump_mtpt(mtpt)
        thisgroup = group
    Core.debug("finished")

dump_all()
